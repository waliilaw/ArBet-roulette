"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/arweave";
exports.ids = ["vendor-chunks/arweave"];
exports.modules = {

/***/ "(ssr)/./node_modules/arweave/node/ar.js":
/*!*****************************************!*\
  !*** ./node_modules/arweave/node/ar.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst bignumber_js_1 = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\");\nclass Ar {\n    /**\n     * Method to take a string value and return a bignumber object.\n     *\n     * @protected\n     * @type {Function}\n     * @memberof Arweave\n     */\n    BigNum;\n    constructor() {\n        // Configure and assign the constructor function for the bignumber library.\n        this.BigNum = (value, decimals) => {\n            let instance = bignumber_js_1.BigNumber.clone({ DECIMAL_PLACES: decimals });\n            return new instance(value);\n        };\n    }\n    winstonToAr(winstonString, { formatted = false, decimals = 12, trim = true } = {}) {\n        let number = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);\n        return formatted ? number.toFormat(decimals) : number.toFixed(decimals);\n    }\n    arToWinston(arString, { formatted = false } = {}) {\n        let number = this.stringToBigNum(arString).shiftedBy(12);\n        return formatted ? number.toFormat() : number.toFixed(0);\n    }\n    compare(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.comparedTo(b);\n    }\n    isEqual(winstonStringA, winstonStringB) {\n        return this.compare(winstonStringA, winstonStringB) === 0;\n    }\n    isLessThan(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.isLessThan(b);\n    }\n    isGreaterThan(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.isGreaterThan(b);\n    }\n    add(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.plus(winstonStringB).toFixed(0);\n    }\n    sub(winstonStringA, winstonStringB) {\n        let a = this.stringToBigNum(winstonStringA);\n        let b = this.stringToBigNum(winstonStringB);\n        return a.minus(winstonStringB).toFixed(0);\n    }\n    stringToBigNum(stringValue, decimalPlaces = 12) {\n        return this.BigNum(stringValue, decimalPlaces);\n    }\n}\nexports[\"default\"] = Ar;\n//# sourceMappingURL=ar.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL2FyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixtQkFBTyxDQUFDLG9FQUFjO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELDBCQUEwQjtBQUN0RjtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0RBQWdELElBQUk7QUFDckY7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG9CQUFvQixJQUFJO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvd2FsaS9Eb3dubG9hZHMvcm91bGV0dGUgL25vZGVfbW9kdWxlcy9hcndlYXZlL25vZGUvYXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBiaWdudW1iZXJfanNfMSA9IHJlcXVpcmUoXCJiaWdudW1iZXIuanNcIik7XG5jbGFzcyBBciB7XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIHRha2UgYSBzdHJpbmcgdmFsdWUgYW5kIHJldHVybiBhIGJpZ251bWJlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBtZW1iZXJvZiBBcndlYXZlXG4gICAgICovXG4gICAgQmlnTnVtO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBDb25maWd1cmUgYW5kIGFzc2lnbiB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBiaWdudW1iZXIgbGlicmFyeS5cbiAgICAgICAgdGhpcy5CaWdOdW0gPSAodmFsdWUsIGRlY2ltYWxzKSA9PiB7XG4gICAgICAgICAgICBsZXQgaW5zdGFuY2UgPSBiaWdudW1iZXJfanNfMS5CaWdOdW1iZXIuY2xvbmUoeyBERUNJTUFMX1BMQUNFUzogZGVjaW1hbHMgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGluc3RhbmNlKHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgd2luc3RvblRvQXIod2luc3RvblN0cmluZywgeyBmb3JtYXR0ZWQgPSBmYWxzZSwgZGVjaW1hbHMgPSAxMiwgdHJpbSA9IHRydWUgfSA9IHt9KSB7XG4gICAgICAgIGxldCBudW1iZXIgPSB0aGlzLnN0cmluZ1RvQmlnTnVtKHdpbnN0b25TdHJpbmcsIGRlY2ltYWxzKS5zaGlmdGVkQnkoLTEyKTtcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZCA/IG51bWJlci50b0Zvcm1hdChkZWNpbWFscykgOiBudW1iZXIudG9GaXhlZChkZWNpbWFscyk7XG4gICAgfVxuICAgIGFyVG9XaW5zdG9uKGFyU3RyaW5nLCB7IGZvcm1hdHRlZCA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBsZXQgbnVtYmVyID0gdGhpcy5zdHJpbmdUb0JpZ051bShhclN0cmluZykuc2hpZnRlZEJ5KDEyKTtcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlZCA/IG51bWJlci50b0Zvcm1hdCgpIDogbnVtYmVyLnRvRml4ZWQoMCk7XG4gICAgfVxuICAgIGNvbXBhcmUod2luc3RvblN0cmluZ0EsIHdpbnN0b25TdHJpbmdCKSB7XG4gICAgICAgIGxldCBhID0gdGhpcy5zdHJpbmdUb0JpZ051bSh3aW5zdG9uU3RyaW5nQSk7XG4gICAgICAgIGxldCBiID0gdGhpcy5zdHJpbmdUb0JpZ051bSh3aW5zdG9uU3RyaW5nQik7XG4gICAgICAgIHJldHVybiBhLmNvbXBhcmVkVG8oYik7XG4gICAgfVxuICAgIGlzRXF1YWwod2luc3RvblN0cmluZ0EsIHdpbnN0b25TdHJpbmdCKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUod2luc3RvblN0cmluZ0EsIHdpbnN0b25TdHJpbmdCKSA9PT0gMDtcbiAgICB9XG4gICAgaXNMZXNzVGhhbih3aW5zdG9uU3RyaW5nQSwgd2luc3RvblN0cmluZ0IpIHtcbiAgICAgICAgbGV0IGEgPSB0aGlzLnN0cmluZ1RvQmlnTnVtKHdpbnN0b25TdHJpbmdBKTtcbiAgICAgICAgbGV0IGIgPSB0aGlzLnN0cmluZ1RvQmlnTnVtKHdpbnN0b25TdHJpbmdCKTtcbiAgICAgICAgcmV0dXJuIGEuaXNMZXNzVGhhbihiKTtcbiAgICB9XG4gICAgaXNHcmVhdGVyVGhhbih3aW5zdG9uU3RyaW5nQSwgd2luc3RvblN0cmluZ0IpIHtcbiAgICAgICAgbGV0IGEgPSB0aGlzLnN0cmluZ1RvQmlnTnVtKHdpbnN0b25TdHJpbmdBKTtcbiAgICAgICAgbGV0IGIgPSB0aGlzLnN0cmluZ1RvQmlnTnVtKHdpbnN0b25TdHJpbmdCKTtcbiAgICAgICAgcmV0dXJuIGEuaXNHcmVhdGVyVGhhbihiKTtcbiAgICB9XG4gICAgYWRkKHdpbnN0b25TdHJpbmdBLCB3aW5zdG9uU3RyaW5nQikge1xuICAgICAgICBsZXQgYSA9IHRoaXMuc3RyaW5nVG9CaWdOdW0od2luc3RvblN0cmluZ0EpO1xuICAgICAgICBsZXQgYiA9IHRoaXMuc3RyaW5nVG9CaWdOdW0od2luc3RvblN0cmluZ0IpO1xuICAgICAgICByZXR1cm4gYS5wbHVzKHdpbnN0b25TdHJpbmdCKS50b0ZpeGVkKDApO1xuICAgIH1cbiAgICBzdWIod2luc3RvblN0cmluZ0EsIHdpbnN0b25TdHJpbmdCKSB7XG4gICAgICAgIGxldCBhID0gdGhpcy5zdHJpbmdUb0JpZ051bSh3aW5zdG9uU3RyaW5nQSk7XG4gICAgICAgIGxldCBiID0gdGhpcy5zdHJpbmdUb0JpZ051bSh3aW5zdG9uU3RyaW5nQik7XG4gICAgICAgIHJldHVybiBhLm1pbnVzKHdpbnN0b25TdHJpbmdCKS50b0ZpeGVkKDApO1xuICAgIH1cbiAgICBzdHJpbmdUb0JpZ051bShzdHJpbmdWYWx1ZSwgZGVjaW1hbFBsYWNlcyA9IDEyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkJpZ051bShzdHJpbmdWYWx1ZSwgZGVjaW1hbFBsYWNlcyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/ar.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/blocks.js":
/*!*********************************************!*\
  !*** ./node_modules/arweave/node/blocks.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst error_1 = __importDefault(__webpack_require__(/*! ./lib/error */ \"(ssr)/./node_modules/arweave/node/lib/error.js\"));\n__webpack_require__(/*! arconnect */ \"(ssr)/./node_modules/arconnect/index.es.js\");\nclass Blocks {\n    api;\n    network;\n    static HASH_ENDPOINT = \"block/hash/\";\n    static HEIGHT_ENDPOINT = \"block/height/\";\n    constructor(api, network) {\n        this.api = api;\n        this.network = network;\n    }\n    /**\n     * Gets a block by its \"indep_hash\"\n     */\n    async get(indepHash) {\n        const response = await this.api.get(`${Blocks.HASH_ENDPOINT}${indepHash}`);\n        if (response.status === 200) {\n            return response.data;\n        }\n        else {\n            if (response.status === 404) {\n                throw new error_1.default(\"BLOCK_NOT_FOUND\" /* ArweaveErrorType.BLOCK_NOT_FOUND */);\n            }\n            else {\n                throw new Error(`Error while loading block data: ${response}`);\n            }\n        }\n    }\n    /**\n     * Gets a block by its \"height\"\n     */\n    async getByHeight(height) {\n        const response = await this.api.get(`${Blocks.HEIGHT_ENDPOINT}${height}`);\n        if (response.status === 200) {\n            return response.data;\n        }\n        else {\n            if (response.status === 404) {\n                throw new error_1.default(\"BLOCK_NOT_FOUND\" /* ArweaveErrorType.BLOCK_NOT_FOUND */);\n            }\n            else {\n                throw new Error(`Error while loading block data: ${response}`);\n            }\n        }\n    }\n    /**\n     * Gets current block data (ie. block with indep_hash = Network.getInfo().current)\n     */\n    async getCurrent() {\n        const { current } = await this.network.getInfo();\n        return await this.get(current);\n    }\n}\nexports[\"default\"] = Blocks;\n//# sourceMappingURL=blocks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL2Jsb2Nrcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQyxtQkFBTyxDQUFDLG1FQUFhO0FBQ3JELG1CQUFPLENBQUMsNkRBQVc7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MscUJBQXFCLEVBQUUsVUFBVTtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLFNBQVM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsdUJBQXVCLEVBQUUsT0FBTztBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLFNBQVM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvd2FsaS9Eb3dubG9hZHMvcm91bGV0dGUgL25vZGVfbW9kdWxlcy9hcndlYXZlL25vZGUvYmxvY2tzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9saWIvZXJyb3JcIikpO1xucmVxdWlyZShcImFyY29ubmVjdFwiKTtcbmNsYXNzIEJsb2NrcyB7XG4gICAgYXBpO1xuICAgIG5ldHdvcms7XG4gICAgc3RhdGljIEhBU0hfRU5EUE9JTlQgPSBcImJsb2NrL2hhc2gvXCI7XG4gICAgc3RhdGljIEhFSUdIVF9FTkRQT0lOVCA9IFwiYmxvY2svaGVpZ2h0L1wiO1xuICAgIGNvbnN0cnVjdG9yKGFwaSwgbmV0d29yaykge1xuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcbiAgICAgICAgdGhpcy5uZXR3b3JrID0gbmV0d29yaztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIGJsb2NrIGJ5IGl0cyBcImluZGVwX2hhc2hcIlxuICAgICAqL1xuICAgIGFzeW5jIGdldChpbmRlcEhhc2gpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwaS5nZXQoYCR7QmxvY2tzLkhBU0hfRU5EUE9JTlR9JHtpbmRlcEhhc2h9YCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5kZWZhdWx0KFwiQkxPQ0tfTk9UX0ZPVU5EXCIgLyogQXJ3ZWF2ZUVycm9yVHlwZS5CTE9DS19OT1RfRk9VTkQgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3aGlsZSBsb2FkaW5nIGJsb2NrIGRhdGE6ICR7cmVzcG9uc2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIGJsb2NrIGJ5IGl0cyBcImhlaWdodFwiXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QnlIZWlnaHQoaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGkuZ2V0KGAke0Jsb2Nrcy5IRUlHSFRfRU5EUE9JTlR9JHtoZWlnaHR9YCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5kZWZhdWx0KFwiQkxPQ0tfTk9UX0ZPVU5EXCIgLyogQXJ3ZWF2ZUVycm9yVHlwZS5CTE9DS19OT1RfRk9VTkQgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3aGlsZSBsb2FkaW5nIGJsb2NrIGRhdGE6ICR7cmVzcG9uc2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBjdXJyZW50IGJsb2NrIGRhdGEgKGllLiBibG9jayB3aXRoIGluZGVwX2hhc2ggPSBOZXR3b3JrLmdldEluZm8oKS5jdXJyZW50KVxuICAgICAqL1xuICAgIGFzeW5jIGdldEN1cnJlbnQoKSB7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudCB9ID0gYXdhaXQgdGhpcy5uZXR3b3JrLmdldEluZm8oKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0KGN1cnJlbnQpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEJsb2Nrcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJsb2Nrcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/blocks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/chunks.js":
/*!*********************************************!*\
  !*** ./node_modules/arweave/node/chunks.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst error_1 = __webpack_require__(/*! ./lib/error */ \"(ssr)/./node_modules/arweave/node/lib/error.js\");\nconst ArweaveUtils = __importStar(__webpack_require__(/*! ./lib/utils */ \"(ssr)/./node_modules/arweave/node/lib/utils.js\"));\nclass Chunks {\n    api;\n    constructor(api) {\n        this.api = api;\n    }\n    async getTransactionOffset(id) {\n        const resp = await this.api.get(`tx/${id}/offset`);\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        throw new Error(`Unable to get transaction offset: ${(0, error_1.getError)(resp)}`);\n    }\n    async getChunk(offset) {\n        const resp = await this.api.get(`chunk/${offset}`);\n        if (resp.status === 200) {\n            return resp.data;\n        }\n        throw new Error(`Unable to get chunk: ${(0, error_1.getError)(resp)}`);\n    }\n    async getChunkData(offset) {\n        const chunk = await this.getChunk(offset);\n        const buf = ArweaveUtils.b64UrlToBuffer(chunk.chunk);\n        return buf;\n    }\n    firstChunkOffset(offsetResponse) {\n        return parseInt(offsetResponse.offset) - parseInt(offsetResponse.size) + 1;\n    }\n    async downloadChunkedData(id) {\n        const offsetResponse = await this.getTransactionOffset(id);\n        const size = parseInt(offsetResponse.size);\n        const endOffset = parseInt(offsetResponse.offset);\n        const startOffset = endOffset - size + 1;\n        const data = new Uint8Array(size);\n        let byte = 0;\n        while (byte < size) {\n            if (this.api.config.logging) {\n                console.log(`[chunk] ${byte}/${size}`);\n            }\n            let chunkData;\n            try {\n                chunkData = await this.getChunkData(startOffset + byte);\n            }\n            catch (error) {\n                console.error(`[chunk] Failed to fetch chunk at offset ${startOffset + byte}`);\n                console.error(`[chunk] This could indicate that the chunk wasn't uploaded or hasn't yet seeded properly to a particular gateway/node`);\n            }\n            if (chunkData) {\n                data.set(chunkData, byte);\n                byte += chunkData.length;\n            }\n            else {\n                throw new Error(`Couldn't complete data download at ${byte}/${size}`);\n            }\n        }\n        return data;\n    }\n}\nexports[\"default\"] = Chunks;\n//# sourceMappingURL=chunks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL2NodW5rcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsbUVBQWE7QUFDckMsa0NBQWtDLG1CQUFPLENBQUMsbUVBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLEdBQUc7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELDRCQUE0QjtBQUN6RjtBQUNBO0FBQ0EsaURBQWlELE9BQU87QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELDRCQUE0QjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsS0FBSyxHQUFHLEtBQUs7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLG1CQUFtQjtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxLQUFLLEdBQUcsS0FBSztBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbGkvRG93bmxvYWRzL3JvdWxldHRlIC9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL2NodW5rcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2xpYi9lcnJvclwiKTtcbmNvbnN0IEFyd2VhdmVVdGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9saWIvdXRpbHNcIikpO1xuY2xhc3MgQ2h1bmtzIHtcbiAgICBhcGk7XG4gICAgY29uc3RydWN0b3IoYXBpKSB7XG4gICAgICAgIHRoaXMuYXBpID0gYXBpO1xuICAgIH1cbiAgICBhc3luYyBnZXRUcmFuc2FjdGlvbk9mZnNldChpZCkge1xuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5hcGkuZ2V0KGB0eC8ke2lkfS9vZmZzZXRgKTtcbiAgICAgICAgaWYgKHJlc3Auc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZ2V0IHRyYW5zYWN0aW9uIG9mZnNldDogJHsoMCwgZXJyb3JfMS5nZXRFcnJvcikocmVzcCl9YCk7XG4gICAgfVxuICAgIGFzeW5jIGdldENodW5rKG9mZnNldCkge1xuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5hcGkuZ2V0KGBjaHVuay8ke29mZnNldH1gKTtcbiAgICAgICAgaWYgKHJlc3Auc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZ2V0IGNodW5rOiAkeygwLCBlcnJvcl8xLmdldEVycm9yKShyZXNwKX1gKTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0Q2h1bmtEYXRhKG9mZnNldCkge1xuICAgICAgICBjb25zdCBjaHVuayA9IGF3YWl0IHRoaXMuZ2V0Q2h1bmsob2Zmc2V0KTtcbiAgICAgICAgY29uc3QgYnVmID0gQXJ3ZWF2ZVV0aWxzLmI2NFVybFRvQnVmZmVyKGNodW5rLmNodW5rKTtcbiAgICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgZmlyc3RDaHVua09mZnNldChvZmZzZXRSZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQob2Zmc2V0UmVzcG9uc2Uub2Zmc2V0KSAtIHBhcnNlSW50KG9mZnNldFJlc3BvbnNlLnNpemUpICsgMTtcbiAgICB9XG4gICAgYXN5bmMgZG93bmxvYWRDaHVua2VkRGF0YShpZCkge1xuICAgICAgICBjb25zdCBvZmZzZXRSZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0VHJhbnNhY3Rpb25PZmZzZXQoaWQpO1xuICAgICAgICBjb25zdCBzaXplID0gcGFyc2VJbnQob2Zmc2V0UmVzcG9uc2Uuc2l6ZSk7XG4gICAgICAgIGNvbnN0IGVuZE9mZnNldCA9IHBhcnNlSW50KG9mZnNldFJlc3BvbnNlLm9mZnNldCk7XG4gICAgICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gZW5kT2Zmc2V0IC0gc2l6ZSArIDE7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICAgICAgbGV0IGJ5dGUgPSAwO1xuICAgICAgICB3aGlsZSAoYnl0ZSA8IHNpemUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFwaS5jb25maWcubG9nZ2luZykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbY2h1bmtdICR7Ynl0ZX0vJHtzaXplfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGNodW5rRGF0YTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2h1bmtEYXRhID0gYXdhaXQgdGhpcy5nZXRDaHVua0RhdGEoc3RhcnRPZmZzZXQgKyBieXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtjaHVua10gRmFpbGVkIHRvIGZldGNoIGNodW5rIGF0IG9mZnNldCAke3N0YXJ0T2Zmc2V0ICsgYnl0ZX1gKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbY2h1bmtdIFRoaXMgY291bGQgaW5kaWNhdGUgdGhhdCB0aGUgY2h1bmsgd2Fzbid0IHVwbG9hZGVkIG9yIGhhc24ndCB5ZXQgc2VlZGVkIHByb3Blcmx5IHRvIGEgcGFydGljdWxhciBnYXRld2F5L25vZGVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaHVua0RhdGEpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnNldChjaHVua0RhdGEsIGJ5dGUpO1xuICAgICAgICAgICAgICAgIGJ5dGUgKz0gY2h1bmtEYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGRuJ3QgY29tcGxldGUgZGF0YSBkb3dubG9hZCBhdCAke2J5dGV9LyR7c2l6ZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBDaHVua3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVua3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/chunks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/common.js":
/*!*********************************************!*\
  !*** ./node_modules/arweave/node/common.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst ar_1 = __importDefault(__webpack_require__(/*! ./ar */ \"(ssr)/./node_modules/arweave/node/ar.js\"));\nconst api_1 = __importDefault(__webpack_require__(/*! ./lib/api */ \"(ssr)/./node_modules/arweave/node/lib/api.js\"));\nconst node_driver_1 = __importDefault(__webpack_require__(/*! ./lib/crypto/node-driver */ \"(ssr)/./node_modules/arweave/node/lib/crypto/node-driver.js\"));\nconst network_1 = __importDefault(__webpack_require__(/*! ./network */ \"(ssr)/./node_modules/arweave/node/network.js\"));\nconst transactions_1 = __importDefault(__webpack_require__(/*! ./transactions */ \"(ssr)/./node_modules/arweave/node/transactions.js\"));\nconst wallets_1 = __importDefault(__webpack_require__(/*! ./wallets */ \"(ssr)/./node_modules/arweave/node/wallets.js\"));\nconst transaction_1 = __importDefault(__webpack_require__(/*! ./lib/transaction */ \"(ssr)/./node_modules/arweave/node/lib/transaction.js\"));\nconst ArweaveUtils = __importStar(__webpack_require__(/*! ./lib/utils */ \"(ssr)/./node_modules/arweave/node/lib/utils.js\"));\nconst silo_1 = __importDefault(__webpack_require__(/*! ./silo */ \"(ssr)/./node_modules/arweave/node/silo.js\"));\nconst chunks_1 = __importDefault(__webpack_require__(/*! ./chunks */ \"(ssr)/./node_modules/arweave/node/chunks.js\"));\nconst blocks_1 = __importDefault(__webpack_require__(/*! ./blocks */ \"(ssr)/./node_modules/arweave/node/blocks.js\"));\nclass Arweave {\n    api;\n    wallets;\n    transactions;\n    network;\n    blocks;\n    ar;\n    silo;\n    chunks;\n    static init;\n    static crypto = new node_driver_1.default();\n    static utils = ArweaveUtils;\n    constructor(apiConfig) {\n        this.api = new api_1.default(apiConfig);\n        this.wallets = new wallets_1.default(this.api, Arweave.crypto);\n        this.chunks = new chunks_1.default(this.api);\n        this.transactions = new transactions_1.default(this.api, Arweave.crypto, this.chunks);\n        this.silo = new silo_1.default(this.api, this.crypto, this.transactions);\n        this.network = new network_1.default(this.api);\n        this.blocks = new blocks_1.default(this.api, this.network);\n        this.ar = new ar_1.default();\n    }\n    /** @deprecated */\n    get crypto() {\n        return Arweave.crypto;\n    }\n    /** @deprecated */\n    get utils() {\n        return Arweave.utils;\n    }\n    getConfig() {\n        return {\n            api: this.api.getConfig(),\n            crypto: null,\n        };\n    }\n    async createTransaction(attributes, jwk) {\n        const transaction = {};\n        Object.assign(transaction, attributes);\n        if (!attributes.data && !(attributes.target && attributes.quantity)) {\n            throw new Error(`A new Arweave transaction must have a 'data' value, or 'target' and 'quantity' values.`);\n        }\n        if (attributes.owner == undefined) {\n            if (jwk && jwk !== \"use_wallet\") {\n                transaction.owner = jwk.n;\n            }\n        }\n        if (attributes.last_tx == undefined) {\n            transaction.last_tx = await this.transactions.getTransactionAnchor();\n        }\n        if (typeof attributes.data === \"string\") {\n            attributes.data = ArweaveUtils.stringToBuffer(attributes.data);\n        }\n        if (attributes.data instanceof ArrayBuffer) {\n            attributes.data = new Uint8Array(attributes.data);\n        }\n        if (attributes.data && !(attributes.data instanceof Uint8Array)) {\n            throw new Error(\"Expected data to be a string, Uint8Array or ArrayBuffer\");\n        }\n        if (attributes.reward == undefined) {\n            const length = attributes.data ? attributes.data.byteLength : 0;\n            transaction.reward = await this.transactions.getPrice(length, transaction.target);\n        }\n        // here we should call prepare chunk\n        transaction.data_root = \"\";\n        transaction.data_size = attributes.data\n            ? attributes.data.byteLength.toString()\n            : \"0\";\n        transaction.data = attributes.data || new Uint8Array(0);\n        const createdTransaction = new transaction_1.default(transaction);\n        await createdTransaction.getSignatureData();\n        return createdTransaction;\n    }\n    async createSiloTransaction(attributes, jwk, siloUri) {\n        const transaction = {};\n        Object.assign(transaction, attributes);\n        if (!attributes.data) {\n            throw new Error(`Silo transactions must have a 'data' value`);\n        }\n        if (!siloUri) {\n            throw new Error(`No Silo URI specified.`);\n        }\n        if (attributes.target || attributes.quantity) {\n            throw new Error(`Silo transactions can only be used for storing data, sending AR to other wallets isn't supported.`);\n        }\n        if (attributes.owner == undefined) {\n            if (!jwk || !jwk.n) {\n                throw new Error(`A new Arweave transaction must either have an 'owner' attribute, or you must provide the jwk parameter.`);\n            }\n            transaction.owner = jwk.n;\n        }\n        if (attributes.last_tx == undefined) {\n            transaction.last_tx = await this.transactions.getTransactionAnchor();\n        }\n        const siloResource = await this.silo.parseUri(siloUri);\n        if (typeof attributes.data == \"string\") {\n            const encrypted = await this.crypto.encrypt(ArweaveUtils.stringToBuffer(attributes.data), siloResource.getEncryptionKey());\n            transaction.reward = await this.transactions.getPrice(encrypted.byteLength);\n            transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n        }\n        if (attributes.data instanceof Uint8Array) {\n            const encrypted = await this.crypto.encrypt(attributes.data, siloResource.getEncryptionKey());\n            transaction.reward = await this.transactions.getPrice(encrypted.byteLength);\n            transaction.data = ArweaveUtils.bufferTob64Url(encrypted);\n        }\n        const siloTransaction = new transaction_1.default(transaction);\n        siloTransaction.addTag(\"Silo-Name\", siloResource.getAccessKey());\n        siloTransaction.addTag(\"Silo-Version\", `0.1.0`);\n        return siloTransaction;\n    }\n    arql(query) {\n        return this.api\n            .post(\"/arql\", query)\n            .then((response) => response.data || []);\n    }\n}\nexports[\"default\"] = Arweave;\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/index.js":
/*!********************************************!*\
  !*** ./node_modules/arweave/node/index.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst common_1 = __importDefault(__webpack_require__(/*! ./common */ \"(ssr)/./node_modules/arweave/node/common.js\"));\ncommon_1.default.init = function (apiConfig = {}) {\n    return new common_1.default(apiConfig);\n};\nmodule.exports = common_1.default;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSxpQ0FBaUMsbUJBQU8sQ0FBQyw2REFBVTtBQUNuRCxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YWxpL0Rvd25sb2Fkcy9yb3VsZXR0ZSAvbm9kZV9tb2R1bGVzL2Fyd2VhdmUvbm9kZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbmNvbnN0IGNvbW1vbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbW1vblwiKSk7XG5jb21tb25fMS5kZWZhdWx0LmluaXQgPSBmdW5jdGlvbiAoYXBpQ29uZmlnID0ge30pIHtcbiAgICByZXR1cm4gbmV3IGNvbW1vbl8xLmRlZmF1bHQoYXBpQ29uZmlnKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGNvbW1vbl8xLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/lib/api.js":
/*!**********************************************!*\
  !*** ./node_modules/arweave/node/lib/api.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Api {\n    METHOD_GET = \"GET\";\n    METHOD_POST = \"POST\";\n    config;\n    constructor(config) {\n        this.applyConfig(config);\n    }\n    applyConfig(config) {\n        this.config = this.mergeDefaults(config);\n    }\n    getConfig() {\n        return this.config;\n    }\n    mergeDefaults(config) {\n        const protocol = config.protocol || \"http\";\n        const port = config.port || (protocol === \"https\" ? 443 : 80);\n        return {\n            host: config.host || \"127.0.0.1\",\n            protocol,\n            port,\n            timeout: config.timeout || 20000,\n            logging: config.logging || false,\n            logger: config.logger || console.log,\n            network: config.network,\n        };\n    }\n    async get(endpoint, config) {\n        return await this.request(endpoint, { ...config, method: this.METHOD_GET });\n    }\n    async post(endpoint, body, config) {\n        const headers = new Headers(config?.headers || {});\n        if (!headers.get(\"content-type\")?.includes(\"application/json\")) {\n            headers.append(\"content-type\", \"application/json\");\n        }\n        headers.append(\"accept\", \"application/json, text/plain, */*\");\n        return await this.request(endpoint, {\n            ...config,\n            method: this.METHOD_POST,\n            body: typeof body !== \"string\" ? JSON.stringify(body) : body,\n            headers,\n        });\n    }\n    async request(endpoint, init) {\n        const headers = new Headers(init?.headers || {});\n        const baseURL = `${this.config.protocol}://${this.config.host}:${this.config.port}`;\n        /* responseType is purely for backwards compatibility with external apps */\n        const responseType = init?.responseType;\n        delete init?.responseType;\n        if (endpoint.startsWith(\"/\")) {\n            endpoint = endpoint.slice(1);\n        }\n        if (this.config.network) {\n            headers.append(\"x-network\", this.config.network);\n        }\n        if (this.config.logging) {\n            this.config.logger(`Requesting: ${baseURL}/${endpoint}`);\n        }\n        let res = await fetch(`${baseURL}/${endpoint}`, {\n            ...(init || {}),\n            headers,\n        });\n        if (this.config.logging) {\n            this.config.logger(`Response:   ${res.url} - ${res.status}`);\n        }\n        const contentType = res.headers.get(\"content-type\");\n        const charset = contentType?.match(/charset=([^()<>@,;:\\\"/[\\]?.=\\s]*)/i)?.[1];\n        const response = res;\n        const decodeText = async () => {\n            if (charset) {\n                try {\n                    response.data = new TextDecoder(charset).decode(await res.arrayBuffer());\n                }\n                catch (e) {\n                    response.data = (await res.text());\n                }\n            }\n            else {\n                response.data = (await res.text());\n            }\n        };\n        if (responseType === \"arraybuffer\") {\n            response.data = (await res.arrayBuffer());\n        }\n        else if (responseType === \"text\") {\n            await decodeText();\n        }\n        else if (responseType === \"webstream\") {\n            response.data = addAsyncIterator(res.body);\n        }\n        else {\n            /** axios defaults to JSON, and then text, we mimic the behaviour */\n            try {\n                let test = await res.clone().json();\n                if (typeof test !== \"object\") {\n                    await decodeText();\n                }\n                else {\n                    response.data = (await res.json());\n                }\n                test = null;\n            }\n            catch {\n                await decodeText();\n            }\n        }\n        return response;\n    }\n}\nexports[\"default\"] = Api;\n// | ReadableStream<Uint8Array>\nconst addAsyncIterator = (body) => {\n    const bodyWithIter = body;\n    if (typeof bodyWithIter[Symbol.asyncIterator] === \"undefined\") {\n        bodyWithIter[Symbol.asyncIterator] = webIiterator(body);\n    }\n    return bodyWithIter;\n};\nconst webIiterator = function (stream) {\n    return async function* iteratorGenerator() {\n        const reader = stream.getReader(); //lock\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done)\n                    return;\n                yield value;\n            }\n        }\n        finally {\n            reader.releaseLock(); //unlock\n        }\n    };\n};\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL2xpYi9hcGkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLG9DQUFvQztBQUNsRjtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZELDJCQUEyQixxQkFBcUIsS0FBSyxpQkFBaUIsR0FBRyxpQkFBaUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsUUFBUSxHQUFHLFNBQVM7QUFDbEU7QUFDQSxpQ0FBaUMsUUFBUSxHQUFHLFNBQVM7QUFDckQsMEJBQTBCO0FBQzFCO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOENBQThDLFNBQVMsSUFBSSxXQUFXO0FBQ3RFO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0Esd0JBQXdCLGNBQWM7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FsaS9Eb3dubG9hZHMvcm91bGV0dGUgL25vZGVfbW9kdWxlcy9hcndlYXZlL25vZGUvbGliL2FwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIEFwaSB7XG4gICAgTUVUSE9EX0dFVCA9IFwiR0VUXCI7XG4gICAgTUVUSE9EX1BPU1QgPSBcIlBPU1RcIjtcbiAgICBjb25maWc7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuYXBwbHlDb25maWcoY29uZmlnKTtcbiAgICB9XG4gICAgYXBwbHlDb25maWcoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gdGhpcy5tZXJnZURlZmF1bHRzKGNvbmZpZyk7XG4gICAgfVxuICAgIGdldENvbmZpZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICAgIH1cbiAgICBtZXJnZURlZmF1bHRzKGNvbmZpZykge1xuICAgICAgICBjb25zdCBwcm90b2NvbCA9IGNvbmZpZy5wcm90b2NvbCB8fCBcImh0dHBcIjtcbiAgICAgICAgY29uc3QgcG9ydCA9IGNvbmZpZy5wb3J0IHx8IChwcm90b2NvbCA9PT0gXCJodHRwc1wiID8gNDQzIDogODApO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaG9zdDogY29uZmlnLmhvc3QgfHwgXCIxMjcuMC4wLjFcIixcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgcG9ydCxcbiAgICAgICAgICAgIHRpbWVvdXQ6IGNvbmZpZy50aW1lb3V0IHx8IDIwMDAwLFxuICAgICAgICAgICAgbG9nZ2luZzogY29uZmlnLmxvZ2dpbmcgfHwgZmFsc2UsXG4gICAgICAgICAgICBsb2dnZXI6IGNvbmZpZy5sb2dnZXIgfHwgY29uc29sZS5sb2csXG4gICAgICAgICAgICBuZXR3b3JrOiBjb25maWcubmV0d29yayxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0KGVuZHBvaW50LCBjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucmVxdWVzdChlbmRwb2ludCwgeyAuLi5jb25maWcsIG1ldGhvZDogdGhpcy5NRVRIT0RfR0VUIH0pO1xuICAgIH1cbiAgICBhc3luYyBwb3N0KGVuZHBvaW50LCBib2R5LCBjb25maWcpIHtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKGNvbmZpZz8uaGVhZGVycyB8fCB7fSk7XG4gICAgICAgIGlmICghaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIik/LmluY2x1ZGVzKFwiYXBwbGljYXRpb24vanNvblwiKSkge1xuICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQoXCJjb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKFwiYWNjZXB0XCIsIFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qXCIpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZXF1ZXN0KGVuZHBvaW50LCB7XG4gICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICBtZXRob2Q6IHRoaXMuTUVUSE9EX1BPU1QsXG4gICAgICAgICAgICBib2R5OiB0eXBlb2YgYm9keSAhPT0gXCJzdHJpbmdcIiA/IEpTT04uc3RyaW5naWZ5KGJvZHkpIDogYm9keSxcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyByZXF1ZXN0KGVuZHBvaW50LCBpbml0KSB7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbml0Py5oZWFkZXJzIHx8IHt9KTtcbiAgICAgICAgY29uc3QgYmFzZVVSTCA9IGAke3RoaXMuY29uZmlnLnByb3RvY29sfTovLyR7dGhpcy5jb25maWcuaG9zdH06JHt0aGlzLmNvbmZpZy5wb3J0fWA7XG4gICAgICAgIC8qIHJlc3BvbnNlVHlwZSBpcyBwdXJlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggZXh0ZXJuYWwgYXBwcyAqL1xuICAgICAgICBjb25zdCByZXNwb25zZVR5cGUgPSBpbml0Py5yZXNwb25zZVR5cGU7XG4gICAgICAgIGRlbGV0ZSBpbml0Py5yZXNwb25zZVR5cGU7XG4gICAgICAgIGlmIChlbmRwb2ludC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgICAgICAgZW5kcG9pbnQgPSBlbmRwb2ludC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25maWcubmV0d29yaykge1xuICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQoXCJ4LW5ldHdvcmtcIiwgdGhpcy5jb25maWcubmV0d29yayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmxvZ2dpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmxvZ2dlcihgUmVxdWVzdGluZzogJHtiYXNlVVJMfS8ke2VuZHBvaW50fWApO1xuICAgICAgICB9XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBmZXRjaChgJHtiYXNlVVJMfS8ke2VuZHBvaW50fWAsIHtcbiAgICAgICAgICAgIC4uLihpbml0IHx8IHt9KSxcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5jb25maWcubG9nZ2luZykge1xuICAgICAgICAgICAgdGhpcy5jb25maWcubG9nZ2VyKGBSZXNwb25zZTogICAke3Jlcy51cmx9IC0gJHtyZXMuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVzLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpO1xuICAgICAgICBjb25zdCBjaGFyc2V0ID0gY29udGVudFR5cGU/Lm1hdGNoKC9jaGFyc2V0PShbXigpPD5ALDs6XFxcIi9bXFxdPy49XFxzXSopL2kpPy5bMV07XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gcmVzO1xuICAgICAgICBjb25zdCBkZWNvZGVUZXh0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoYXJzZXQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhID0gbmV3IFRleHREZWNvZGVyKGNoYXJzZXQpLmRlY29kZShhd2FpdCByZXMuYXJyYXlCdWZmZXIoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEgPSAoYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IChhd2FpdCByZXMudGV4dCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PT0gXCJhcnJheWJ1ZmZlclwiKSB7XG4gICAgICAgICAgICByZXNwb25zZS5kYXRhID0gKGF3YWl0IHJlcy5hcnJheUJ1ZmZlcigpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXNwb25zZVR5cGUgPT09IFwidGV4dFwiKSB7XG4gICAgICAgICAgICBhd2FpdCBkZWNvZGVUZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVzcG9uc2VUeXBlID09PSBcIndlYnN0cmVhbVwiKSB7XG4gICAgICAgICAgICByZXNwb25zZS5kYXRhID0gYWRkQXN5bmNJdGVyYXRvcihyZXMuYm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvKiogYXhpb3MgZGVmYXVsdHMgdG8gSlNPTiwgYW5kIHRoZW4gdGV4dCwgd2UgbWltaWMgdGhlIGJlaGF2aW91ciAqL1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgdGVzdCA9IGF3YWl0IHJlcy5jbG9uZSgpLmpzb24oKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRlc3QgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZGVjb2RlVGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YSA9IChhd2FpdCByZXMuanNvbigpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGVzdCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZGVjb2RlVGV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBBcGk7XG4vLyB8IFJlYWRhYmxlU3RyZWFtPFVpbnQ4QXJyYXk+XG5jb25zdCBhZGRBc3luY0l0ZXJhdG9yID0gKGJvZHkpID0+IHtcbiAgICBjb25zdCBib2R5V2l0aEl0ZXIgPSBib2R5O1xuICAgIGlmICh0eXBlb2YgYm9keVdpdGhJdGVyW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBib2R5V2l0aEl0ZXJbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gd2ViSWl0ZXJhdG9yKGJvZHkpO1xuICAgIH1cbiAgICByZXR1cm4gYm9keVdpdGhJdGVyO1xufTtcbmNvbnN0IHdlYklpdGVyYXRvciA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24qIGl0ZXJhdG9yR2VuZXJhdG9yKCkge1xuICAgICAgICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7IC8vbG9ja1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgIGlmIChkb25lKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgeWllbGQgdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICByZWFkZXIucmVsZWFzZUxvY2soKTsgLy91bmxvY2tcbiAgICAgICAgfVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/lib/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/lib/crypto/node-driver.js":
/*!*************************************************************!*\
  !*** ./node_modules/arweave/node/lib/crypto/node-driver.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst pem_1 = __webpack_require__(/*! ./pem */ \"(ssr)/./node_modules/arweave/node/lib/crypto/pem.js\");\nconst crypto = __importStar(__webpack_require__(/*! crypto */ \"crypto\"));\nclass NodeCryptoDriver {\n    keyLength = 4096;\n    publicExponent = 0x10001;\n    hashAlgorithm = \"sha256\";\n    encryptionAlgorithm = \"aes-256-cbc\";\n    generateJWK() {\n        if (typeof crypto.generateKeyPair != \"function\") {\n            throw new Error(\"Keypair generation not supported in this version of Node, only supported in versions 10+\");\n        }\n        return new Promise((resolve, reject) => {\n            crypto.generateKeyPair(\"rsa\", {\n                modulusLength: this.keyLength,\n                publicExponent: this.publicExponent,\n                privateKeyEncoding: {\n                    type: \"pkcs1\",\n                    format: \"pem\",\n                },\n                publicKeyEncoding: { type: \"pkcs1\", format: \"pem\" },\n            }, (err, publicKey, privateKey) => {\n                if (err) {\n                    reject(err);\n                }\n                resolve(this.pemToJWK(privateKey));\n            });\n        });\n    }\n    sign(jwk, data, { saltLength } = {}) {\n        return new Promise((resolve, reject) => {\n            resolve(crypto\n                .createSign(this.hashAlgorithm)\n                .update(data)\n                .sign({\n                key: this.jwkToPem(jwk),\n                padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n                saltLength,\n            }));\n        });\n    }\n    verify(publicModulus, data, signature) {\n        return new Promise((resolve, reject) => {\n            const publicJwk = {\n                kty: \"RSA\",\n                e: \"AQAB\",\n                n: publicModulus,\n            };\n            const pem = this.jwkToPem(publicJwk); //?\n            const keyObject = crypto.createPublicKey({\n                key: pem,\n                format: \"pem\",\n            });\n            const verify = crypto.createVerify(this.hashAlgorithm);\n            verify.update(data);\n            const verifyResult = verify.verify({\n                key: keyObject,\n                padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n            }, signature);\n            if (!verifyResult) {\n                const details = {\n                    asymmetricKeyType: keyObject.asymmetricKeyType,\n                    modulusLength: keyObject.asymmetricKeyDetails?.modulusLength,\n                };\n                console.warn(\"Transaction Verification Failed! \\n\" +\n                    `Details: ${JSON.stringify(details, null, 2)} \\n` +\n                    \"N.B. ArweaveJS is only guaranteed to verify txs created using ArweaveJS.\");\n            }\n            resolve(verifyResult);\n        });\n    }\n    hash(data, algorithm = \"SHA-256\") {\n        if (typeof data === \"string\") {\n            throw new TypeError(\"Data must be a Uint8Array\");\n        }\n        return new Promise((resolve, reject) => {\n            resolve(crypto\n                .createHash(this.parseHashAlgorithm(algorithm))\n                .update(data)\n                .digest());\n        });\n    }\n    /**\n     * If a key is passed as a buffer it *must* be exactly 32 bytes.\n     * If a key is passed as a string then any length may be used.\n     *\n     * @param {Buffer} data\n     * @param {(string | Buffer)} key\n     * @returns {Promise<Uint8Array>}\n     */\n    async encrypt(data, key, salt) {\n        // create a random string for deriving the key\n        // const salt = crypto.randomBytes(16);\n        // console.log(salt);\n        // As we're using CBC with a randomised IV per cypher we don't really need\n        // an additional random salt per passphrase.\n        const derivedKey = crypto.pbkdf2Sync(key, (salt = salt ? salt : \"salt\"), 100000, 32, this.hashAlgorithm);\n        const iv = crypto.randomBytes(16);\n        const cipher = crypto.createCipheriv(this.encryptionAlgorithm, derivedKey, iv);\n        const encrypted = Buffer.concat([iv, cipher.update(data), cipher.final()]);\n        return encrypted;\n    }\n    /**\n     * If a key is passed as a buffer it *must* be exactly 32 bytes.\n     * If a key is passed as a string then any length may be used.\n     *\n     * @param {Buffer} encrypted\n     * @param {(string | Buffer)} key\n     * @returns {Promise<Uint8Array>}\n     */\n    async decrypt(encrypted, key, salt) {\n        try {\n            // create a random string for deriving the key\n            // const salt = crypto.randomBytes(16).toString('hex');\n            // As we're using CBC with a randomised IV per cypher we don't really need\n            // an additional random salt per passphrase.\n            const derivedKey = crypto.pbkdf2Sync(key, (salt = salt ? salt : \"salt\"), 100000, 32, this.hashAlgorithm);\n            const iv = encrypted.slice(0, 16);\n            const data = encrypted.slice(16);\n            const decipher = crypto.createDecipheriv(this.encryptionAlgorithm, derivedKey, iv);\n            const decrypted = Buffer.concat([\n                decipher.update(data),\n                decipher.final(),\n            ]);\n            return decrypted;\n        }\n        catch (error) {\n            throw new Error(\"Failed to decrypt\");\n        }\n    }\n    jwkToPem(jwk) {\n        return (0, pem_1.jwkTopem)(jwk);\n    }\n    pemToJWK(pem) {\n        let jwk = (0, pem_1.pemTojwk)(pem);\n        return jwk;\n    }\n    parseHashAlgorithm(algorithm) {\n        switch (algorithm) {\n            case \"SHA-256\":\n                return \"sha256\";\n            case \"SHA-384\":\n                return \"sha384\";\n            default:\n                throw new Error(`Algorithm not supported: ${algorithm}`);\n        }\n    }\n}\nexports[\"default\"] = NodeCryptoDriver;\n//# sourceMappingURL=node-driver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/lib/crypto/node-driver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/lib/crypto/pem.js":
/*!*****************************************************!*\
  !*** ./node_modules/arweave/node/lib/crypto/pem.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pemTojwk = pemTojwk;\nexports.jwkTopem = jwkTopem;\n// @ts-ignore\nconst asn = __importStar(__webpack_require__(/*! asn1.js */ \"(ssr)/./node_modules/asn1.js/lib/asn1.js\"));\nfunction urlize(base64) {\n    return base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction hex2b64url(str) {\n    return urlize(Buffer.from(str, \"hex\").toString(\"base64\"));\n}\nvar RSAPublicKey = asn.define(\"RSAPublicKey\", function () {\n    this.seq().obj(this.key(\"n\").int(), this.key(\"e\").int());\n});\nvar AlgorithmIdentifier = asn.define(\"AlgorithmIdentifier\", function () {\n    this.seq().obj(this.key(\"algorithm\").objid(), this.key(\"parameters\").optional().any());\n});\nvar PublicKeyInfo = asn.define(\"PublicKeyInfo\", function () {\n    this.seq().obj(this.key(\"algorithm\").use(AlgorithmIdentifier), this.key(\"publicKey\").bitstr());\n});\nvar Version = asn.define(\"Version\", function () {\n    this.int({\n        0: \"two-prime\",\n        1: \"multi\",\n    });\n});\nvar OtherPrimeInfos = asn.define(\"OtherPrimeInfos\", function () {\n    this.seq().obj(this.key(\"ri\").int(), this.key(\"di\").int(), this.key(\"ti\").int());\n});\nvar RSAPrivateKey = asn.define(\"RSAPrivateKey\", function () {\n    this.seq().obj(this.key(\"version\").use(Version), this.key(\"n\").int(), this.key(\"e\").int(), this.key(\"d\").int(), this.key(\"p\").int(), this.key(\"q\").int(), this.key(\"dp\").int(), this.key(\"dq\").int(), this.key(\"qi\").int(), this.key(\"other\").optional().use(OtherPrimeInfos));\n});\nvar PrivateKeyInfo = asn.define(\"PrivateKeyInfo\", function () {\n    this.seq().obj(this.key(\"version\").use(Version), this.key(\"algorithm\").use(AlgorithmIdentifier), this.key(\"privateKey\").bitstr());\n});\nconst RSA_OID = \"1.2.840.113549.1.1.1\";\nfunction addExtras(obj, extras) {\n    extras = extras || {};\n    Object.keys(extras).forEach(function (key) {\n        obj[key] = extras[key];\n    });\n    return obj;\n}\nfunction pad(hex) {\n    return hex.length % 2 === 1 ? \"0\" + hex : hex;\n}\nfunction decodeRsaPublic(buffer, extras) {\n    var key = RSAPublicKey.decode(buffer, \"der\");\n    var e = pad(key.e.toString(16));\n    var jwk = {\n        kty: \"RSA\",\n        n: bn2base64url(key.n),\n        e: hex2b64url(e),\n    };\n    return addExtras(jwk, extras);\n}\nfunction decodeRsaPrivate(buffer, extras) {\n    var key = RSAPrivateKey.decode(buffer, \"der\");\n    var e = pad(key.e.toString(16));\n    var jwk = {\n        kty: \"RSA\",\n        n: bn2base64url(key.n),\n        e: hex2b64url(e),\n        d: bn2base64url(key.d),\n        p: bn2base64url(key.p),\n        q: bn2base64url(key.q),\n        dp: bn2base64url(key.dp),\n        dq: bn2base64url(key.dq),\n        qi: bn2base64url(key.qi),\n    };\n    return addExtras(jwk, extras);\n}\nfunction decodePublic(buffer, extras) {\n    var info = PublicKeyInfo.decode(buffer, \"der\");\n    return decodeRsaPublic(info.publicKey.data, extras);\n}\nfunction decodePrivate(buffer, extras) {\n    var info = PrivateKeyInfo.decode(buffer, \"der\");\n    return decodeRsaPrivate(info.privateKey.data, extras);\n}\nfunction getDecoder(header) {\n    var match = /^-----BEGIN (RSA )?(PUBLIC|PRIVATE) KEY-----$/.exec(header);\n    if (!match) {\n        return null;\n    }\n    var isRSA = !!match[1];\n    var isPrivate = match[2] === \"PRIVATE\";\n    if (isPrivate) {\n        return isRSA ? decodeRsaPrivate : decodePrivate;\n    }\n    else {\n        return isRSA ? decodeRsaPublic : decodePublic;\n    }\n}\nfunction parse(jwk) {\n    return {\n        n: string2bn(jwk.n),\n        e: string2bn(jwk.e),\n        d: jwk.d && string2bn(jwk.d),\n        p: jwk.p && string2bn(jwk.p),\n        q: jwk.q && string2bn(jwk.q),\n        dp: jwk.dp && string2bn(jwk.dp),\n        dq: jwk.dq && string2bn(jwk.dq),\n        qi: jwk.qi && string2bn(jwk.qi),\n    };\n}\nfunction bn2base64url(bn) {\n    return hex2b64url(pad(bn.toString(16)));\n}\nfunction base64url2bn(str) {\n    return new asn.bignum(Buffer.from(str, \"base64\"));\n}\nfunction string2bn(str) {\n    if (/^[0-9]+$/.test(str)) {\n        return new asn.bignum(str, 10);\n    }\n    return base64url2bn(str);\n}\nfunction pemTojwk(pem, extras) {\n    var text = pem.toString().split(/(\\r\\n|\\r|\\n)+/g);\n    text = text.filter(function (line) {\n        return line.trim().length !== 0;\n    });\n    var decoder = getDecoder(text[0]);\n    text = text.slice(1, -1).join(\"\");\n    return decoder(Buffer.from(text.replace(/[^\\w\\d\\+\\/=]+/g, \"\"), \"base64\"), extras);\n}\nfunction jwkTopem(json) {\n    var jwk = parse(json);\n    var isPrivate = !!jwk.d;\n    var t = isPrivate ? \"PRIVATE\" : \"PUBLIC\";\n    var header = \"-----BEGIN RSA \" + t + \" KEY-----\\n\";\n    var footer = \"\\n-----END RSA \" + t + \" KEY-----\\n\";\n    var data = Buffer.alloc(0);\n    if (isPrivate) {\n        jwk.version = \"two-prime\";\n        data = RSAPrivateKey.encode(jwk, \"der\");\n    }\n    else {\n        data = RSAPublicKey.encode(jwk, \"der\");\n    }\n    var body = data\n        .toString(\"base64\")\n        .match(/.{1,64}/g)\n        .join(\"\\n\");\n    return header + body + footer;\n}\n//# sourceMappingURL=pem.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/lib/crypto/pem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/lib/deepHash.js":
/*!***************************************************!*\
  !*** ./node_modules/arweave/node/lib/deepHash.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = deepHash;\nconst common_1 = __importDefault(__webpack_require__(/*! ../common */ \"(ssr)/./node_modules/arweave/node/common.js\"));\nasync function deepHash(data) {\n    if (Array.isArray(data)) {\n        const tag = common_1.default.utils.concatBuffers([\n            common_1.default.utils.stringToBuffer(\"list\"),\n            common_1.default.utils.stringToBuffer(data.length.toString()),\n        ]);\n        return await deepHashChunks(data, await common_1.default.crypto.hash(tag, \"SHA-384\"));\n    }\n    const tag = common_1.default.utils.concatBuffers([\n        common_1.default.utils.stringToBuffer(\"blob\"),\n        common_1.default.utils.stringToBuffer(data.byteLength.toString()),\n    ]);\n    const taggedHash = common_1.default.utils.concatBuffers([\n        await common_1.default.crypto.hash(tag, \"SHA-384\"),\n        await common_1.default.crypto.hash(data, \"SHA-384\"),\n    ]);\n    return await common_1.default.crypto.hash(taggedHash, \"SHA-384\");\n}\nasync function deepHashChunks(chunks, acc) {\n    if (chunks.length < 1) {\n        return acc;\n    }\n    const hashPair = common_1.default.utils.concatBuffers([\n        acc,\n        await deepHash(chunks[0]),\n    ]);\n    const newAcc = await common_1.default.crypto.hash(hashPair, \"SHA-384\");\n    return await deepHashChunks(chunks.slice(1), newAcc);\n}\n//# sourceMappingURL=deepHash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL2xpYi9kZWVwSGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFlO0FBQ2YsaUNBQWlDLG1CQUFPLENBQUMsOERBQVc7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FsaS9Eb3dubG9hZHMvcm91bGV0dGUgL25vZGVfbW9kdWxlcy9hcndlYXZlL25vZGUvbGliL2RlZXBIYXNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVlcEhhc2g7XG5jb25zdCBjb21tb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vY29tbW9uXCIpKTtcbmFzeW5jIGZ1bmN0aW9uIGRlZXBIYXNoKGRhdGEpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICBjb25zdCB0YWcgPSBjb21tb25fMS5kZWZhdWx0LnV0aWxzLmNvbmNhdEJ1ZmZlcnMoW1xuICAgICAgICAgICAgY29tbW9uXzEuZGVmYXVsdC51dGlscy5zdHJpbmdUb0J1ZmZlcihcImxpc3RcIiksXG4gICAgICAgICAgICBjb21tb25fMS5kZWZhdWx0LnV0aWxzLnN0cmluZ1RvQnVmZmVyKGRhdGEubGVuZ3RoLnRvU3RyaW5nKCkpLFxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGRlZXBIYXNoQ2h1bmtzKGRhdGEsIGF3YWl0IGNvbW1vbl8xLmRlZmF1bHQuY3J5cHRvLmhhc2godGFnLCBcIlNIQS0zODRcIikpO1xuICAgIH1cbiAgICBjb25zdCB0YWcgPSBjb21tb25fMS5kZWZhdWx0LnV0aWxzLmNvbmNhdEJ1ZmZlcnMoW1xuICAgICAgICBjb21tb25fMS5kZWZhdWx0LnV0aWxzLnN0cmluZ1RvQnVmZmVyKFwiYmxvYlwiKSxcbiAgICAgICAgY29tbW9uXzEuZGVmYXVsdC51dGlscy5zdHJpbmdUb0J1ZmZlcihkYXRhLmJ5dGVMZW5ndGgudG9TdHJpbmcoKSksXG4gICAgXSk7XG4gICAgY29uc3QgdGFnZ2VkSGFzaCA9IGNvbW1vbl8xLmRlZmF1bHQudXRpbHMuY29uY2F0QnVmZmVycyhbXG4gICAgICAgIGF3YWl0IGNvbW1vbl8xLmRlZmF1bHQuY3J5cHRvLmhhc2godGFnLCBcIlNIQS0zODRcIiksXG4gICAgICAgIGF3YWl0IGNvbW1vbl8xLmRlZmF1bHQuY3J5cHRvLmhhc2goZGF0YSwgXCJTSEEtMzg0XCIpLFxuICAgIF0pO1xuICAgIHJldHVybiBhd2FpdCBjb21tb25fMS5kZWZhdWx0LmNyeXB0by5oYXNoKHRhZ2dlZEhhc2gsIFwiU0hBLTM4NFwiKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGRlZXBIYXNoQ2h1bmtzKGNodW5rcywgYWNjKSB7XG4gICAgaWYgKGNodW5rcy5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIGNvbnN0IGhhc2hQYWlyID0gY29tbW9uXzEuZGVmYXVsdC51dGlscy5jb25jYXRCdWZmZXJzKFtcbiAgICAgICAgYWNjLFxuICAgICAgICBhd2FpdCBkZWVwSGFzaChjaHVua3NbMF0pLFxuICAgIF0pO1xuICAgIGNvbnN0IG5ld0FjYyA9IGF3YWl0IGNvbW1vbl8xLmRlZmF1bHQuY3J5cHRvLmhhc2goaGFzaFBhaXIsIFwiU0hBLTM4NFwiKTtcbiAgICByZXR1cm4gYXdhaXQgZGVlcEhhc2hDaHVua3MoY2h1bmtzLnNsaWNlKDEpLCBuZXdBY2MpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVlcEhhc2guanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/lib/deepHash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/lib/error.js":
/*!************************************************!*\
  !*** ./node_modules/arweave/node/lib/error.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getError = getError;\nclass ArweaveError extends Error {\n    type;\n    response;\n    constructor(type, optional = {}) {\n        if (optional.message) {\n            super(optional.message);\n        }\n        else {\n            super();\n        }\n        this.type = type;\n        this.response = optional.response;\n    }\n    getType() {\n        return this.type;\n    }\n}\nexports[\"default\"] = ArweaveError;\n// Safely get error string\n// from a response, falling back to\n// resp.data, statusText or 'unknown'.\n// Note: a wrongly set content-type can\n// cause what is a json response to be interepted\n// as a string or Buffer, so we handle that too.\nfunction getError(resp) {\n    let data = resp.data;\n    if (typeof resp.data === \"string\") {\n        try {\n            data = JSON.parse(resp.data);\n        }\n        catch (e) { }\n    }\n    if (resp.data instanceof ArrayBuffer || resp.data instanceof Uint8Array) {\n        try {\n            data = JSON.parse(data.toString());\n        }\n        catch (e) { }\n    }\n    return data ? data.error || data : resp.statusText || \"unknown\";\n}\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL2xpYi9lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FsaS9Eb3dubG9hZHMvcm91bGV0dGUgL25vZGVfbW9kdWxlcy9hcndlYXZlL25vZGUvbGliL2Vycm9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRFcnJvciA9IGdldEVycm9yO1xuY2xhc3MgQXJ3ZWF2ZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIHR5cGU7XG4gICAgcmVzcG9uc2U7XG4gICAgY29uc3RydWN0b3IodHlwZSwgb3B0aW9uYWwgPSB7fSkge1xuICAgICAgICBpZiAob3B0aW9uYWwubWVzc2FnZSkge1xuICAgICAgICAgICAgc3VwZXIob3B0aW9uYWwubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSBvcHRpb25hbC5yZXNwb25zZTtcbiAgICB9XG4gICAgZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBBcndlYXZlRXJyb3I7XG4vLyBTYWZlbHkgZ2V0IGVycm9yIHN0cmluZ1xuLy8gZnJvbSBhIHJlc3BvbnNlLCBmYWxsaW5nIGJhY2sgdG9cbi8vIHJlc3AuZGF0YSwgc3RhdHVzVGV4dCBvciAndW5rbm93bicuXG4vLyBOb3RlOiBhIHdyb25nbHkgc2V0IGNvbnRlbnQtdHlwZSBjYW5cbi8vIGNhdXNlIHdoYXQgaXMgYSBqc29uIHJlc3BvbnNlIHRvIGJlIGludGVyZXB0ZWRcbi8vIGFzIGEgc3RyaW5nIG9yIEJ1ZmZlciwgc28gd2UgaGFuZGxlIHRoYXQgdG9vLlxuZnVuY3Rpb24gZ2V0RXJyb3IocmVzcCkge1xuICAgIGxldCBkYXRhID0gcmVzcC5kYXRhO1xuICAgIGlmICh0eXBlb2YgcmVzcC5kYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShyZXNwLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7IH1cbiAgICB9XG4gICAgaWYgKHJlc3AuZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IHJlc3AuZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHsgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YSA/IGRhdGEuZXJyb3IgfHwgZGF0YSA6IHJlc3Auc3RhdHVzVGV4dCB8fCBcInVua25vd25cIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/lib/merkle.js":
/*!*************************************************!*\
  !*** ./node_modules/arweave/node/lib/merkle.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.arrayCompare = exports.MIN_CHUNK_SIZE = exports.MAX_CHUNK_SIZE = void 0;\nexports.chunkData = chunkData;\nexports.generateLeaves = generateLeaves;\nexports.computeRootHash = computeRootHash;\nexports.generateTree = generateTree;\nexports.generateTransactionChunks = generateTransactionChunks;\nexports.buildLayers = buildLayers;\nexports.generateProofs = generateProofs;\nexports.arrayFlatten = arrayFlatten;\nexports.intToBuffer = intToBuffer;\nexports.bufferToInt = bufferToInt;\nexports.validatePath = validatePath;\nexports.debug = debug;\n/**\n * @see {@link https://github.com/ArweaveTeam/arweave/blob/fbc381e0e36efffa45d13f2faa6199d3766edaa2/apps/arweave/src/ar_merkle.erl}\n */\nconst common_1 = __importDefault(__webpack_require__(/*! ../common */ \"(ssr)/./node_modules/arweave/node/common.js\"));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/arweave/node/lib/utils.js\");\nexports.MAX_CHUNK_SIZE = 256 * 1024;\nexports.MIN_CHUNK_SIZE = 32 * 1024;\nconst NOTE_SIZE = 32;\nconst HASH_SIZE = 32;\n/**\n * Takes the input data and chunks it into (mostly) equal sized chunks.\n * The last chunk will be a bit smaller as it contains the remainder\n * from the chunking process.\n */\nasync function chunkData(data) {\n    let chunks = [];\n    let rest = data;\n    let cursor = 0;\n    while (rest.byteLength >= exports.MAX_CHUNK_SIZE) {\n        let chunkSize = exports.MAX_CHUNK_SIZE;\n        // If the total bytes left will produce a chunk < MIN_CHUNK_SIZE,\n        // then adjust the amount we put in this 2nd last chunk.\n        let nextChunkSize = rest.byteLength - exports.MAX_CHUNK_SIZE;\n        if (nextChunkSize > 0 && nextChunkSize < exports.MIN_CHUNK_SIZE) {\n            chunkSize = Math.ceil(rest.byteLength / 2);\n            // console.log(`Last chunk will be: ${nextChunkSize} which is below ${MIN_CHUNK_SIZE}, adjusting current to ${chunkSize} with ${rest.byteLength} left.`)\n        }\n        const chunk = rest.slice(0, chunkSize);\n        const dataHash = await common_1.default.crypto.hash(chunk);\n        cursor += chunk.byteLength;\n        chunks.push({\n            dataHash,\n            minByteRange: cursor - chunk.byteLength,\n            maxByteRange: cursor,\n        });\n        rest = rest.slice(chunkSize);\n    }\n    chunks.push({\n        dataHash: await common_1.default.crypto.hash(rest),\n        minByteRange: cursor,\n        maxByteRange: cursor + rest.byteLength,\n    });\n    return chunks;\n}\nasync function generateLeaves(chunks) {\n    return Promise.all(chunks.map(async ({ dataHash, minByteRange, maxByteRange }) => {\n        return {\n            type: \"leaf\",\n            id: await hash(await Promise.all([hash(dataHash), hash(intToBuffer(maxByteRange))])),\n            dataHash: dataHash,\n            minByteRange,\n            maxByteRange,\n        };\n    }));\n}\n/**\n * Builds an arweave merkle tree and gets the root hash for the given input.\n */\nasync function computeRootHash(data) {\n    const rootNode = await generateTree(data);\n    return rootNode.id;\n}\nasync function generateTree(data) {\n    const rootNode = await buildLayers(await generateLeaves(await chunkData(data)));\n    return rootNode;\n}\n/**\n * Generates the data_root, chunks & proofs\n * needed for a transaction.\n *\n * This also checks if the last chunk is a zero-length\n * chunk and discards that chunk and proof if so.\n * (we do not need to upload this zero length chunk)\n *\n * @param data\n */\nasync function generateTransactionChunks(data) {\n    const chunks = await chunkData(data);\n    const leaves = await generateLeaves(chunks);\n    const root = await buildLayers(leaves);\n    const proofs = await generateProofs(root);\n    // Discard the last chunk & proof if it's zero length.\n    const lastChunk = chunks.slice(-1)[0];\n    if (lastChunk.maxByteRange - lastChunk.minByteRange === 0) {\n        chunks.splice(chunks.length - 1, 1);\n        proofs.splice(proofs.length - 1, 1);\n    }\n    return {\n        data_root: root.id,\n        chunks,\n        proofs,\n    };\n}\n/**\n * Starting with the bottom layer of leaf nodes, hash every second pair\n * into a new branch node, push those branch nodes onto a new layer,\n * and then recurse, building up the tree to it's root, where the\n * layer only consists of two items.\n */\nasync function buildLayers(nodes, level = 0) {\n    // If there is only 1 node left, this is going to be the root node\n    if (nodes.length < 2) {\n        const root = nodes[0];\n        // console.log(\"Root layer\", root);\n        return root;\n    }\n    const nextLayer = [];\n    for (let i = 0; i < nodes.length; i += 2) {\n        nextLayer.push(await hashBranch(nodes[i], nodes[i + 1]));\n    }\n    // console.log(\"Layer\", nextLayer);\n    return buildLayers(nextLayer, level + 1);\n}\n/**\n * Recursively search through all branches of the tree,\n * and generate a proof for each leaf node.\n */\nfunction generateProofs(root) {\n    const proofs = resolveBranchProofs(root);\n    if (!Array.isArray(proofs)) {\n        return [proofs];\n    }\n    return arrayFlatten(proofs);\n}\nfunction resolveBranchProofs(node, proof = new Uint8Array(), depth = 0) {\n    if (node.type == \"leaf\") {\n        return {\n            offset: node.maxByteRange - 1,\n            proof: (0, utils_1.concatBuffers)([\n                proof,\n                node.dataHash,\n                intToBuffer(node.maxByteRange),\n            ]),\n        };\n    }\n    if (node.type == \"branch\") {\n        const partialProof = (0, utils_1.concatBuffers)([\n            proof,\n            node.leftChild.id,\n            node.rightChild.id,\n            intToBuffer(node.byteRange),\n        ]);\n        return [\n            resolveBranchProofs(node.leftChild, partialProof, depth + 1),\n            resolveBranchProofs(node.rightChild, partialProof, depth + 1),\n        ];\n    }\n    throw new Error(`Unexpected node type`);\n}\nfunction arrayFlatten(input) {\n    const flat = [];\n    input.forEach((item) => {\n        if (Array.isArray(item)) {\n            flat.push(...arrayFlatten(item));\n        }\n        else {\n            flat.push(item);\n        }\n    });\n    return flat;\n}\nasync function hashBranch(left, right) {\n    if (!right) {\n        return left;\n    }\n    let branch = {\n        type: \"branch\",\n        id: await hash([\n            await hash(left.id),\n            await hash(right.id),\n            await hash(intToBuffer(left.maxByteRange)),\n        ]),\n        byteRange: left.maxByteRange,\n        maxByteRange: right.maxByteRange,\n        leftChild: left,\n        rightChild: right,\n    };\n    return branch;\n}\nasync function hash(data) {\n    if (Array.isArray(data)) {\n        data = common_1.default.utils.concatBuffers(data);\n    }\n    return new Uint8Array(await common_1.default.crypto.hash(data));\n}\nfunction intToBuffer(note) {\n    const buffer = new Uint8Array(NOTE_SIZE);\n    for (var i = buffer.length - 1; i >= 0; i--) {\n        var byte = note % 256;\n        buffer[i] = byte;\n        note = (note - byte) / 256;\n    }\n    return buffer;\n}\nfunction bufferToInt(buffer) {\n    let value = 0;\n    for (var i = 0; i < buffer.length; i++) {\n        value *= 256;\n        value += buffer[i];\n    }\n    return value;\n}\nconst arrayCompare = (a, b) => a.every((value, index) => b[index] === value);\nexports.arrayCompare = arrayCompare;\nasync function validatePath(id, dest, leftBound, rightBound, path) {\n    if (rightBound <= 0) {\n        return false;\n    }\n    if (dest >= rightBound) {\n        return validatePath(id, 0, rightBound - 1, rightBound, path);\n    }\n    if (dest < 0) {\n        return validatePath(id, 0, 0, rightBound, path);\n    }\n    if (path.length == HASH_SIZE + NOTE_SIZE) {\n        const pathData = path.slice(0, HASH_SIZE);\n        const endOffsetBuffer = path.slice(pathData.length, pathData.length + NOTE_SIZE);\n        const pathDataHash = await hash([\n            await hash(pathData),\n            await hash(endOffsetBuffer),\n        ]);\n        let result = (0, exports.arrayCompare)(id, pathDataHash);\n        if (result) {\n            return {\n                offset: rightBound - 1,\n                leftBound: leftBound,\n                rightBound: rightBound,\n                chunkSize: rightBound - leftBound,\n            };\n        }\n        return false;\n    }\n    const left = path.slice(0, HASH_SIZE);\n    const right = path.slice(left.length, left.length + HASH_SIZE);\n    const offsetBuffer = path.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);\n    const offset = bufferToInt(offsetBuffer);\n    const remainder = path.slice(left.length + right.length + offsetBuffer.length);\n    const pathHash = await hash([\n        await hash(left),\n        await hash(right),\n        await hash(offsetBuffer),\n    ]);\n    if ((0, exports.arrayCompare)(id, pathHash)) {\n        if (dest < offset) {\n            return await validatePath(left, dest, leftBound, Math.min(rightBound, offset), remainder);\n        }\n        return await validatePath(right, dest, Math.max(leftBound, offset), rightBound, remainder);\n    }\n    return false;\n}\n/**\n * Inspect an arweave chunk proof.\n * Takes proof, parses, reads and displays the values for console logging.\n * One proof section per line\n * Format: left,right,offset => hash\n */\nasync function debug(proof, output = \"\") {\n    if (proof.byteLength < 1) {\n        return output;\n    }\n    const left = proof.slice(0, HASH_SIZE);\n    const right = proof.slice(left.length, left.length + HASH_SIZE);\n    const offsetBuffer = proof.slice(left.length + right.length, left.length + right.length + NOTE_SIZE);\n    const offset = bufferToInt(offsetBuffer);\n    const remainder = proof.slice(left.length + right.length + offsetBuffer.length);\n    const pathHash = await hash([\n        await hash(left),\n        await hash(right),\n        await hash(offsetBuffer),\n    ]);\n    const updatedOutput = `${output}\\n${JSON.stringify(Buffer.from(left))},${JSON.stringify(Buffer.from(right))},${offset} => ${JSON.stringify(pathHash)}`;\n    return debug(remainder, updatedOutput);\n}\n//# sourceMappingURL=merkle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/lib/merkle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/lib/transaction-uploader.js":
/*!***************************************************************!*\
  !*** ./node_modules/arweave/node/lib/transaction-uploader.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TransactionUploader = void 0;\nconst transaction_1 = __importDefault(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/arweave/node/lib/transaction.js\"));\nconst ArweaveUtils = __importStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/arweave/node/lib/utils.js\"));\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/arweave/node/lib/error.js\");\nconst merkle_1 = __webpack_require__(/*! ./merkle */ \"(ssr)/./node_modules/arweave/node/lib/merkle.js\");\n// Maximum amount of chunks we will upload in the body.\nconst MAX_CHUNKS_IN_BODY = 1;\n// We assume these errors are intermitment and we can try again after a delay:\n// - not_joined\n// - timeout\n// - data_root_not_found (we may have hit a node that just hasn't seen it yet)\n// - exceeds_disk_pool_size_limit\n// We also try again after any kind of unexpected network errors\n// Errors from /chunk we should never try and continue on.\nconst FATAL_CHUNK_UPLOAD_ERRORS = [\n    \"invalid_json\",\n    \"chunk_too_big\",\n    \"data_path_too_big\",\n    \"offset_too_big\",\n    \"data_size_too_big\",\n    \"chunk_proof_ratio_not_attractive\",\n    \"invalid_proof\",\n];\n// Amount we will delay on receiving an error response but do want to continue.\nconst ERROR_DELAY = 1000 * 40;\nclass TransactionUploader {\n    api;\n    chunkIndex = 0;\n    txPosted = false;\n    transaction;\n    lastRequestTimeEnd = 0;\n    totalErrors = 0; // Not serialized.\n    data;\n    lastResponseStatus = 0;\n    lastResponseError = \"\";\n    get isComplete() {\n        return (this.txPosted &&\n            this.chunkIndex === this.transaction.chunks.chunks.length);\n    }\n    get totalChunks() {\n        return this.transaction.chunks.chunks.length;\n    }\n    get uploadedChunks() {\n        return this.chunkIndex;\n    }\n    get pctComplete() {\n        return Math.trunc((this.uploadedChunks / this.totalChunks) * 100);\n    }\n    constructor(api, transaction) {\n        this.api = api;\n        if (!transaction.id) {\n            throw new Error(`Transaction is not signed`);\n        }\n        if (!transaction.chunks) {\n            throw new Error(`Transaction chunks not prepared`);\n        }\n        // Make a copy of transaction, zeroing the data so we can serialize.\n        this.data = transaction.data;\n        this.transaction = new transaction_1.default(Object.assign({}, transaction, { data: new Uint8Array(0) }));\n    }\n    /**\n     * Uploads the next part of the transaction.\n     * On the first call this posts the transaction\n     * itself and on any subsequent calls uploads the\n     * next chunk until it completes.\n     */\n    async uploadChunk(chunkIndex_) {\n        if (this.isComplete) {\n            throw new Error(`Upload is already complete`);\n        }\n        if (this.lastResponseError !== \"\") {\n            this.totalErrors++;\n        }\n        else {\n            this.totalErrors = 0;\n        }\n        // We have been trying for about an hour receiving an\n        // error every time, so eventually bail.\n        if (this.totalErrors === 100) {\n            throw new Error(`Unable to complete upload: ${this.lastResponseStatus}: ${this.lastResponseError}`);\n        }\n        let delay = this.lastResponseError === \"\"\n            ? 0\n            : Math.max(this.lastRequestTimeEnd + ERROR_DELAY - Date.now(), ERROR_DELAY);\n        if (delay > 0) {\n            // Jitter delay bcoz networks, subtract up to 30% from 40 seconds\n            delay = delay - delay * Math.random() * 0.3;\n            await new Promise((res) => setTimeout(res, delay));\n        }\n        this.lastResponseError = \"\";\n        if (!this.txPosted) {\n            await this.postTransaction();\n            return;\n        }\n        if (chunkIndex_) {\n            this.chunkIndex = chunkIndex_;\n        }\n        const chunk = this.transaction.getChunk(chunkIndex_ || this.chunkIndex, this.data);\n        const chunkOk = await (0, merkle_1.validatePath)(this.transaction.chunks.data_root, parseInt(chunk.offset), 0, parseInt(chunk.data_size), ArweaveUtils.b64UrlToBuffer(chunk.data_path));\n        if (!chunkOk) {\n            throw new Error(`Unable to validate chunk ${this.chunkIndex}`);\n        }\n        // Catch network errors and turn them into objects with status -1 and an error message.\n        const resp = await this.api\n            .post(`chunk`, this.transaction.getChunk(this.chunkIndex, this.data))\n            .catch((e) => {\n            console.error(e.message);\n            return { status: -1, data: { error: e.message } };\n        });\n        this.lastRequestTimeEnd = Date.now();\n        this.lastResponseStatus = resp.status;\n        if (this.lastResponseStatus == 200) {\n            this.chunkIndex++;\n        }\n        else {\n            this.lastResponseError = (0, error_1.getError)(resp);\n            if (FATAL_CHUNK_UPLOAD_ERRORS.includes(this.lastResponseError)) {\n                throw new Error(`Fatal error uploading chunk ${this.chunkIndex}: ${this.lastResponseError}`);\n            }\n        }\n    }\n    /**\n     * Reconstructs an upload from its serialized state and data.\n     * Checks if data matches the expected data_root.\n     *\n     * @param serialized\n     * @param data\n     */\n    static async fromSerialized(api, serialized, data) {\n        if (!serialized ||\n            typeof serialized.chunkIndex !== \"number\" ||\n            typeof serialized.transaction !== \"object\") {\n            throw new Error(`Serialized object does not match expected format.`);\n        }\n        // Everything looks ok, reconstruct the TransactionUpload,\n        // prepare the chunks again and verify the data_root matches\n        var transaction = new transaction_1.default(serialized.transaction);\n        if (!transaction.chunks) {\n            await transaction.prepareChunks(data);\n        }\n        const upload = new TransactionUploader(api, transaction);\n        // Copy the serialized upload information, and data passed in.\n        upload.chunkIndex = serialized.chunkIndex;\n        upload.lastRequestTimeEnd = serialized.lastRequestTimeEnd;\n        upload.lastResponseError = serialized.lastResponseError;\n        upload.lastResponseStatus = serialized.lastResponseStatus;\n        upload.txPosted = serialized.txPosted;\n        upload.data = data;\n        if (upload.transaction.data_root !== serialized.transaction.data_root) {\n            throw new Error(`Data mismatch: Uploader doesn't match provided data.`);\n        }\n        return upload;\n    }\n    /**\n     * Reconstruct an upload from the tx metadata, ie /tx/<id>.\n     *\n     * @param api\n     * @param id\n     * @param data\n     */\n    static async fromTransactionId(api, id) {\n        const resp = await api.get(`tx/${id}`);\n        if (resp.status !== 200) {\n            throw new Error(`Tx ${id} not found: ${resp.status}`);\n        }\n        const transaction = resp.data;\n        transaction.data = new Uint8Array(0);\n        const serialized = {\n            txPosted: true,\n            chunkIndex: 0,\n            lastResponseError: \"\",\n            lastRequestTimeEnd: 0,\n            lastResponseStatus: 0,\n            transaction,\n        };\n        return serialized;\n    }\n    toJSON() {\n        return {\n            chunkIndex: this.chunkIndex,\n            transaction: this.transaction,\n            lastRequestTimeEnd: this.lastRequestTimeEnd,\n            lastResponseStatus: this.lastResponseStatus,\n            lastResponseError: this.lastResponseError,\n            txPosted: this.txPosted,\n        };\n    }\n    // POST to /tx\n    async postTransaction() {\n        const uploadInBody = this.totalChunks <= MAX_CHUNKS_IN_BODY;\n        if (uploadInBody) {\n            // Post the transaction with data.\n            this.transaction.data = this.data;\n            const resp = await this.api.post(`tx`, this.transaction).catch((e) => {\n                console.error(e);\n                return { status: -1, data: { error: e.message } };\n            });\n            this.lastRequestTimeEnd = Date.now();\n            this.lastResponseStatus = resp.status;\n            this.transaction.data = new Uint8Array(0);\n            if (resp.status >= 200 && resp.status < 300) {\n                // We are complete.\n                this.txPosted = true;\n                this.chunkIndex = MAX_CHUNKS_IN_BODY;\n                return;\n            }\n            this.lastResponseError = (0, error_1.getError)(resp);\n            throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);\n        }\n        // Post the transaction with no data.\n        const resp = await this.api.post(`tx`, this.transaction);\n        this.lastRequestTimeEnd = Date.now();\n        this.lastResponseStatus = resp.status;\n        if (!(resp.status >= 200 && resp.status < 300)) {\n            this.lastResponseError = (0, error_1.getError)(resp);\n            throw new Error(`Unable to upload transaction: ${resp.status}, ${this.lastResponseError}`);\n        }\n        this.txPosted = true;\n    }\n}\nexports.TransactionUploader = TransactionUploader;\n//# sourceMappingURL=transaction-uploader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/lib/transaction-uploader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/lib/transaction.js":
/*!******************************************************!*\
  !*** ./node_modules/arweave/node/lib/transaction.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Tag = void 0;\nconst ArweaveUtils = __importStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/arweave/node/lib/utils.js\"));\nconst deepHash_1 = __importDefault(__webpack_require__(/*! ./deepHash */ \"(ssr)/./node_modules/arweave/node/lib/deepHash.js\"));\nconst merkle_1 = __webpack_require__(/*! ./merkle */ \"(ssr)/./node_modules/arweave/node/lib/merkle.js\");\nclass BaseObject {\n    get(field, options) {\n        if (!Object.getOwnPropertyNames(this).includes(field)) {\n            throw new Error(`Field \"${field}\" is not a property of the Arweave Transaction class.`);\n        }\n        // Handle fields that are Uint8Arrays.\n        // To maintain compat we encode them to b64url\n        // if decode option is not specificed.\n        if (this[field] instanceof Uint8Array) {\n            if (options && options.decode && options.string) {\n                return ArweaveUtils.bufferToString(this[field]);\n            }\n            if (options && options.decode && !options.string) {\n                return this[field];\n            }\n            return ArweaveUtils.bufferTob64Url(this[field]);\n        }\n        if (this[field] instanceof Array) {\n            if (options?.decode !== undefined || options?.string !== undefined) {\n                if (field === \"tags\") {\n                    console.warn(`Did you mean to use 'transaction[\"tags\"]' ?`);\n                }\n                throw new Error(`Cannot decode or stringify an array.`);\n            }\n            return this[field];\n        }\n        if (options && options.decode == true) {\n            if (options && options.string) {\n                return ArweaveUtils.b64UrlToString(this[field]);\n            }\n            return ArweaveUtils.b64UrlToBuffer(this[field]);\n        }\n        return this[field];\n    }\n}\nclass Tag extends BaseObject {\n    name;\n    value;\n    constructor(name, value, decode = false) {\n        super();\n        this.name = name;\n        this.value = value;\n    }\n}\nexports.Tag = Tag;\nclass Transaction extends BaseObject {\n    format = 2;\n    id = \"\";\n    last_tx = \"\";\n    owner = \"\";\n    tags = [];\n    target = \"\";\n    quantity = \"0\";\n    data_size = \"0\";\n    data = new Uint8Array();\n    data_root = \"\";\n    reward = \"0\";\n    signature = \"\";\n    // Computed when needed.\n    chunks;\n    constructor(attributes = {}) {\n        super();\n        Object.assign(this, attributes);\n        // If something passes in a Tx that has been toJSON'ed and back,\n        // or where the data was filled in from /tx/data endpoint.\n        // data will be b64url encoded, so decode it.\n        if (typeof this.data === \"string\") {\n            this.data = ArweaveUtils.b64UrlToBuffer(this.data);\n        }\n        if (attributes.tags) {\n            this.tags = attributes.tags.map((tag) => {\n                return new Tag(tag.name, tag.value);\n            });\n        }\n    }\n    addTag(name, value) {\n        this.tags.push(new Tag(ArweaveUtils.stringToB64Url(name), ArweaveUtils.stringToB64Url(value)));\n    }\n    toJSON() {\n        return {\n            format: this.format,\n            id: this.id,\n            last_tx: this.last_tx,\n            owner: this.owner,\n            tags: this.tags,\n            target: this.target,\n            quantity: this.quantity,\n            data: ArweaveUtils.bufferTob64Url(this.data),\n            data_size: this.data_size,\n            data_root: this.data_root,\n            data_tree: this.data_tree,\n            reward: this.reward,\n            signature: this.signature,\n        };\n    }\n    setOwner(owner) {\n        this.owner = owner;\n    }\n    setSignature({ id, owner, reward, tags, signature, }) {\n        this.id = id;\n        this.owner = owner;\n        if (reward)\n            this.reward = reward;\n        if (tags)\n            this.tags = tags;\n        this.signature = signature;\n    }\n    async prepareChunks(data) {\n        // Note: we *do not* use `this.data`, the caller may be\n        // operating on a transaction with an zero length data field.\n        // This function computes the chunks for the data passed in and\n        // assigns the result to this transaction. It should not read the\n        // data *from* this transaction.\n        if (!this.chunks && data.byteLength > 0) {\n            this.chunks = await (0, merkle_1.generateTransactionChunks)(data);\n            this.data_root = ArweaveUtils.bufferTob64Url(this.chunks.data_root);\n        }\n        if (!this.chunks && data.byteLength === 0) {\n            this.chunks = {\n                chunks: [],\n                data_root: new Uint8Array(),\n                proofs: [],\n            };\n            this.data_root = \"\";\n        }\n    }\n    // Returns a chunk in a format suitable for posting to /chunk.\n    // Similar to `prepareChunks()` this does not operate `this.data`,\n    // instead using the data passed in.\n    getChunk(idx, data) {\n        if (!this.chunks) {\n            throw new Error(`Chunks have not been prepared`);\n        }\n        const proof = this.chunks.proofs[idx];\n        const chunk = this.chunks.chunks[idx];\n        return {\n            data_root: this.data_root,\n            data_size: this.data_size,\n            data_path: ArweaveUtils.bufferTob64Url(proof.proof),\n            offset: proof.offset.toString(),\n            chunk: ArweaveUtils.bufferTob64Url(data.slice(chunk.minByteRange, chunk.maxByteRange)),\n        };\n    }\n    async getSignatureData() {\n        switch (this.format) {\n            case 1:\n                let tags = this.tags.reduce((accumulator, tag) => {\n                    return ArweaveUtils.concatBuffers([\n                        accumulator,\n                        tag.get(\"name\", { decode: true, string: false }),\n                        tag.get(\"value\", { decode: true, string: false }),\n                    ]);\n                }, new Uint8Array());\n                return ArweaveUtils.concatBuffers([\n                    this.get(\"owner\", { decode: true, string: false }),\n                    this.get(\"target\", { decode: true, string: false }),\n                    this.get(\"data\", { decode: true, string: false }),\n                    ArweaveUtils.stringToBuffer(this.quantity),\n                    ArweaveUtils.stringToBuffer(this.reward),\n                    this.get(\"last_tx\", { decode: true, string: false }),\n                    tags,\n                ]);\n            case 2:\n                if (!this.data_root) {\n                    await this.prepareChunks(this.data);\n                }\n                const tagList = this.tags.map((tag) => [\n                    tag.get(\"name\", { decode: true, string: false }),\n                    tag.get(\"value\", { decode: true, string: false }),\n                ]);\n                return await (0, deepHash_1.default)([\n                    ArweaveUtils.stringToBuffer(this.format.toString()),\n                    this.get(\"owner\", { decode: true, string: false }),\n                    this.get(\"target\", { decode: true, string: false }),\n                    ArweaveUtils.stringToBuffer(this.quantity),\n                    ArweaveUtils.stringToBuffer(this.reward),\n                    this.get(\"last_tx\", { decode: true, string: false }),\n                    tagList,\n                    ArweaveUtils.stringToBuffer(this.data_size),\n                    this.get(\"data_root\", { decode: true, string: false }),\n                ]);\n            default:\n                throw new Error(`Unexpected transaction format: ${this.format}`);\n        }\n    }\n}\nexports[\"default\"] = Transaction;\n//# sourceMappingURL=transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/lib/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/lib/utils.js":
/*!************************************************!*\
  !*** ./node_modules/arweave/node/lib/utils.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.concatBuffers = concatBuffers;\nexports.b64UrlToString = b64UrlToString;\nexports.bufferToString = bufferToString;\nexports.stringToBuffer = stringToBuffer;\nexports.stringToB64Url = stringToB64Url;\nexports.b64UrlToBuffer = b64UrlToBuffer;\nexports.bufferTob64 = bufferTob64;\nexports.bufferTob64Url = bufferTob64Url;\nexports.b64UrlEncode = b64UrlEncode;\nexports.b64UrlDecode = b64UrlDecode;\nconst B64js = __importStar(__webpack_require__(/*! base64-js */ \"(ssr)/./node_modules/base64-js/index.js\"));\nfunction concatBuffers(buffers) {\n    let total_length = 0;\n    for (let i = 0; i < buffers.length; i++) {\n        total_length += buffers[i].byteLength;\n    }\n    let temp = new Uint8Array(total_length);\n    let offset = 0;\n    temp.set(new Uint8Array(buffers[0]), offset);\n    offset += buffers[0].byteLength;\n    for (let i = 1; i < buffers.length; i++) {\n        temp.set(new Uint8Array(buffers[i]), offset);\n        offset += buffers[i].byteLength;\n    }\n    return temp;\n}\nfunction b64UrlToString(b64UrlString) {\n    let buffer = b64UrlToBuffer(b64UrlString);\n    return bufferToString(buffer);\n}\nfunction bufferToString(buffer) {\n    return new TextDecoder(\"utf-8\", { fatal: true }).decode(buffer);\n}\nfunction stringToBuffer(string) {\n    return new TextEncoder().encode(string);\n}\nfunction stringToB64Url(string) {\n    return bufferTob64Url(stringToBuffer(string));\n}\nfunction b64UrlToBuffer(b64UrlString) {\n    return new Uint8Array(B64js.toByteArray(b64UrlDecode(b64UrlString)));\n}\nfunction bufferTob64(buffer) {\n    return B64js.fromByteArray(new Uint8Array(buffer));\n}\nfunction bufferTob64Url(buffer) {\n    return b64UrlEncode(bufferTob64(buffer));\n}\nfunction b64UrlEncode(b64UrlString) {\n    try {\n        return b64UrlString\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\")\n            .replace(/\\=/g, \"\");\n    }\n    catch (error) {\n        throw new Error(\"Failed to encode string\", { cause: error });\n    }\n}\nfunction b64UrlDecode(b64UrlString) {\n    try {\n        b64UrlString = b64UrlString.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\");\n        let padding;\n        b64UrlString.length % 4 == 0\n            ? (padding = 0)\n            : (padding = 4 - (b64UrlString.length % 4));\n        return b64UrlString.concat(\"=\".repeat(padding));\n    }\n    catch (error) {\n        throw new Error(\"Failed to decode string\", { cause: error });\n    }\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIsbUJBQW1CO0FBQ25CLHNCQUFzQjtBQUN0QixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLDJCQUEyQixtQkFBTyxDQUFDLDBEQUFXO0FBQzlDO0FBQ0E7QUFDQSxvQkFBb0Isb0JBQW9CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsYUFBYTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsY0FBYztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsY0FBYztBQUNuRTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YWxpL0Rvd25sb2Fkcy9yb3VsZXR0ZSAvbm9kZV9tb2R1bGVzL2Fyd2VhdmUvbm9kZS9saWIvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29uY2F0QnVmZmVycyA9IGNvbmNhdEJ1ZmZlcnM7XG5leHBvcnRzLmI2NFVybFRvU3RyaW5nID0gYjY0VXJsVG9TdHJpbmc7XG5leHBvcnRzLmJ1ZmZlclRvU3RyaW5nID0gYnVmZmVyVG9TdHJpbmc7XG5leHBvcnRzLnN0cmluZ1RvQnVmZmVyID0gc3RyaW5nVG9CdWZmZXI7XG5leHBvcnRzLnN0cmluZ1RvQjY0VXJsID0gc3RyaW5nVG9CNjRVcmw7XG5leHBvcnRzLmI2NFVybFRvQnVmZmVyID0gYjY0VXJsVG9CdWZmZXI7XG5leHBvcnRzLmJ1ZmZlclRvYjY0ID0gYnVmZmVyVG9iNjQ7XG5leHBvcnRzLmJ1ZmZlclRvYjY0VXJsID0gYnVmZmVyVG9iNjRVcmw7XG5leHBvcnRzLmI2NFVybEVuY29kZSA9IGI2NFVybEVuY29kZTtcbmV4cG9ydHMuYjY0VXJsRGVjb2RlID0gYjY0VXJsRGVjb2RlO1xuY29uc3QgQjY0anMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImJhc2U2NC1qc1wiKSk7XG5mdW5jdGlvbiBjb25jYXRCdWZmZXJzKGJ1ZmZlcnMpIHtcbiAgICBsZXQgdG90YWxfbGVuZ3RoID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdG90YWxfbGVuZ3RoICs9IGJ1ZmZlcnNbaV0uYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgbGV0IHRlbXAgPSBuZXcgVWludDhBcnJheSh0b3RhbF9sZW5ndGgpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIHRlbXAuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlcnNbMF0pLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBidWZmZXJzWzBdLmJ5dGVMZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRlbXAuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZmZlcnNbaV0pLCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gYnVmZmVyc1tpXS5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcDtcbn1cbmZ1bmN0aW9uIGI2NFVybFRvU3RyaW5nKGI2NFVybFN0cmluZykge1xuICAgIGxldCBidWZmZXIgPSBiNjRVcmxUb0J1ZmZlcihiNjRVcmxTdHJpbmcpO1xuICAgIHJldHVybiBidWZmZXJUb1N0cmluZyhidWZmZXIpO1xufVxuZnVuY3Rpb24gYnVmZmVyVG9TdHJpbmcoYnVmZmVyKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIsIHsgZmF0YWw6IHRydWUgfSkuZGVjb2RlKGJ1ZmZlcik7XG59XG5mdW5jdGlvbiBzdHJpbmdUb0J1ZmZlcihzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cmluZyk7XG59XG5mdW5jdGlvbiBzdHJpbmdUb0I2NFVybChzdHJpbmcpIHtcbiAgICByZXR1cm4gYnVmZmVyVG9iNjRVcmwoc3RyaW5nVG9CdWZmZXIoc3RyaW5nKSk7XG59XG5mdW5jdGlvbiBiNjRVcmxUb0J1ZmZlcihiNjRVcmxTdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoQjY0anMudG9CeXRlQXJyYXkoYjY0VXJsRGVjb2RlKGI2NFVybFN0cmluZykpKTtcbn1cbmZ1bmN0aW9uIGJ1ZmZlclRvYjY0KGJ1ZmZlcikge1xuICAgIHJldHVybiBCNjRqcy5mcm9tQnl0ZUFycmF5KG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpO1xufVxuZnVuY3Rpb24gYnVmZmVyVG9iNjRVcmwoYnVmZmVyKSB7XG4gICAgcmV0dXJuIGI2NFVybEVuY29kZShidWZmZXJUb2I2NChidWZmZXIpKTtcbn1cbmZ1bmN0aW9uIGI2NFVybEVuY29kZShiNjRVcmxTdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYjY0VXJsU3RyaW5nXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwrL2csIFwiLVwiKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCBcIl9cIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXD0vZywgXCJcIik7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZW5jb2RlIHN0cmluZ1wiLCB7IGNhdXNlOiBlcnJvciB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBiNjRVcmxEZWNvZGUoYjY0VXJsU3RyaW5nKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgYjY0VXJsU3RyaW5nID0gYjY0VXJsU3RyaW5nLnJlcGxhY2UoL1xcLS9nLCBcIitcIikucmVwbGFjZSgvXFxfL2csIFwiL1wiKTtcbiAgICAgICAgbGV0IHBhZGRpbmc7XG4gICAgICAgIGI2NFVybFN0cmluZy5sZW5ndGggJSA0ID09IDBcbiAgICAgICAgICAgID8gKHBhZGRpbmcgPSAwKVxuICAgICAgICAgICAgOiAocGFkZGluZyA9IDQgLSAoYjY0VXJsU3RyaW5nLmxlbmd0aCAlIDQpKTtcbiAgICAgICAgcmV0dXJuIGI2NFVybFN0cmluZy5jb25jYXQoXCI9XCIucmVwZWF0KHBhZGRpbmcpKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBkZWNvZGUgc3RyaW5nXCIsIHsgY2F1c2U6IGVycm9yIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/network.js":
/*!**********************************************!*\
  !*** ./node_modules/arweave/node/network.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass Network {\n    api;\n    constructor(api) {\n        this.api = api;\n    }\n    getInfo() {\n        return this.api.get(`info`).then((response) => {\n            return response.data;\n        });\n    }\n    getPeers() {\n        return this.api.get(`peers`).then((response) => {\n            return response.data;\n        });\n    }\n}\nexports[\"default\"] = Network;\n//# sourceMappingURL=network.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL25ldHdvcmsuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbGkvRG93bmxvYWRzL3JvdWxldHRlIC9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL25ldHdvcmsuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBOZXR3b3JrIHtcbiAgICBhcGk7XG4gICAgY29uc3RydWN0b3IoYXBpKSB7XG4gICAgICAgIHRoaXMuYXBpID0gYXBpO1xuICAgIH1cbiAgICBnZXRJbmZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGkuZ2V0KGBpbmZvYCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0UGVlcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaS5nZXQoYHBlZXJzYCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBOZXR3b3JrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29yay5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/network.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/silo.js":
/*!*******************************************!*\
  !*** ./node_modules/arweave/node/silo.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SiloResource = void 0;\nconst ArweaveUtils = __importStar(__webpack_require__(/*! ./lib/utils */ \"(ssr)/./node_modules/arweave/node/lib/utils.js\"));\nclass Silo {\n    api;\n    crypto;\n    transactions;\n    constructor(api, crypto, transactions) {\n        this.api = api;\n        this.crypto = crypto;\n        this.transactions = transactions;\n    }\n    async get(siloURI) {\n        if (!siloURI) {\n            throw new Error(`No Silo URI specified`);\n        }\n        const resource = await this.parseUri(siloURI);\n        const ids = await this.transactions.search(\"Silo-Name\", resource.getAccessKey());\n        if (ids.length == 0) {\n            throw new Error(`No data could be found for the Silo URI: ${siloURI}`);\n        }\n        const transaction = await this.transactions.get(ids[0]);\n        if (!transaction) {\n            throw new Error(`No data could be found for the Silo URI: ${siloURI}`);\n        }\n        const encrypted = transaction.get(\"data\", { decode: true, string: false });\n        return this.crypto.decrypt(encrypted, resource.getEncryptionKey());\n    }\n    async readTransactionData(transaction, siloURI) {\n        if (!siloURI) {\n            throw new Error(`No Silo URI specified`);\n        }\n        const resource = await this.parseUri(siloURI);\n        const encrypted = transaction.get(\"data\", { decode: true, string: false });\n        return this.crypto.decrypt(encrypted, resource.getEncryptionKey());\n    }\n    async parseUri(siloURI) {\n        const parsed = siloURI.match(/^([a-z0-9-_]+)\\.([0-9]+)/i);\n        if (!parsed) {\n            throw new Error(`Invalid Silo name, must be a name in the format of [a-z0-9]+.[0-9]+, e.g. 'bubble.7'`);\n        }\n        const siloName = parsed[1];\n        const hashIterations = Math.pow(2, parseInt(parsed[2]));\n        const digest = await this.hash(ArweaveUtils.stringToBuffer(siloName), hashIterations);\n        const accessKey = ArweaveUtils.bufferTob64(digest.slice(0, 15));\n        const encryptionkey = await this.hash(digest.slice(16, 31), 1);\n        return new SiloResource(siloURI, accessKey, encryptionkey);\n    }\n    async hash(input, iterations) {\n        let digest = await this.crypto.hash(input);\n        for (let count = 0; count < iterations - 1; count++) {\n            digest = await this.crypto.hash(digest);\n        }\n        return digest;\n    }\n}\nexports[\"default\"] = Silo;\nclass SiloResource {\n    uri;\n    accessKey;\n    encryptionKey;\n    constructor(uri, accessKey, encryptionKey) {\n        this.uri = uri;\n        this.accessKey = accessKey;\n        this.encryptionKey = encryptionKey;\n    }\n    getUri() {\n        return this.uri;\n    }\n    getAccessKey() {\n        return this.accessKey;\n    }\n    getEncryptionKey() {\n        return this.encryptionKey;\n    }\n}\nexports.SiloResource = SiloResource;\n//# sourceMappingURL=silo.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL3NpbG8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQixrQ0FBa0MsbUJBQU8sQ0FBQyxtRUFBYTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxRQUFRO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxRQUFRO0FBQ2hGO0FBQ0Esb0RBQW9ELDZCQUE2QjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCw2QkFBNkI7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsd0JBQXdCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvVXNlcnMvd2FsaS9Eb3dubG9hZHMvcm91bGV0dGUgL25vZGVfbW9kdWxlcy9hcndlYXZlL25vZGUvc2lsby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaWxvUmVzb3VyY2UgPSB2b2lkIDA7XG5jb25zdCBBcndlYXZlVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vbGliL3V0aWxzXCIpKTtcbmNsYXNzIFNpbG8ge1xuICAgIGFwaTtcbiAgICBjcnlwdG87XG4gICAgdHJhbnNhY3Rpb25zO1xuICAgIGNvbnN0cnVjdG9yKGFwaSwgY3J5cHRvLCB0cmFuc2FjdGlvbnMpIHtcbiAgICAgICAgdGhpcy5hcGkgPSBhcGk7XG4gICAgICAgIHRoaXMuY3J5cHRvID0gY3J5cHRvO1xuICAgICAgICB0aGlzLnRyYW5zYWN0aW9ucyA9IHRyYW5zYWN0aW9ucztcbiAgICB9XG4gICAgYXN5bmMgZ2V0KHNpbG9VUkkpIHtcbiAgICAgICAgaWYgKCFzaWxvVVJJKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIFNpbG8gVVJJIHNwZWNpZmllZGApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc291cmNlID0gYXdhaXQgdGhpcy5wYXJzZVVyaShzaWxvVVJJKTtcbiAgICAgICAgY29uc3QgaWRzID0gYXdhaXQgdGhpcy50cmFuc2FjdGlvbnMuc2VhcmNoKFwiU2lsby1OYW1lXCIsIHJlc291cmNlLmdldEFjY2Vzc0tleSgpKTtcbiAgICAgICAgaWYgKGlkcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBkYXRhIGNvdWxkIGJlIGZvdW5kIGZvciB0aGUgU2lsbyBVUkk6ICR7c2lsb1VSSX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IHRoaXMudHJhbnNhY3Rpb25zLmdldChpZHNbMF0pO1xuICAgICAgICBpZiAoIXRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGRhdGEgY291bGQgYmUgZm91bmQgZm9yIHRoZSBTaWxvIFVSSTogJHtzaWxvVVJJfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVuY3J5cHRlZCA9IHRyYW5zYWN0aW9uLmdldChcImRhdGFcIiwgeyBkZWNvZGU6IHRydWUsIHN0cmluZzogZmFsc2UgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNyeXB0by5kZWNyeXB0KGVuY3J5cHRlZCwgcmVzb3VyY2UuZ2V0RW5jcnlwdGlvbktleSgpKTtcbiAgICB9XG4gICAgYXN5bmMgcmVhZFRyYW5zYWN0aW9uRGF0YSh0cmFuc2FjdGlvbiwgc2lsb1VSSSkge1xuICAgICAgICBpZiAoIXNpbG9VUkkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gU2lsbyBVUkkgc3BlY2lmaWVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBhd2FpdCB0aGlzLnBhcnNlVXJpKHNpbG9VUkkpO1xuICAgICAgICBjb25zdCBlbmNyeXB0ZWQgPSB0cmFuc2FjdGlvbi5nZXQoXCJkYXRhXCIsIHsgZGVjb2RlOiB0cnVlLCBzdHJpbmc6IGZhbHNlIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5jcnlwdG8uZGVjcnlwdChlbmNyeXB0ZWQsIHJlc291cmNlLmdldEVuY3J5cHRpb25LZXkoKSk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlVXJpKHNpbG9VUkkpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc2lsb1VSSS5tYXRjaCgvXihbYS16MC05LV9dKylcXC4oWzAtOV0rKS9pKTtcbiAgICAgICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBTaWxvIG5hbWUsIG11c3QgYmUgYSBuYW1lIGluIHRoZSBmb3JtYXQgb2YgW2EtejAtOV0rLlswLTldKywgZS5nLiAnYnViYmxlLjcnYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2lsb05hbWUgPSBwYXJzZWRbMV07XG4gICAgICAgIGNvbnN0IGhhc2hJdGVyYXRpb25zID0gTWF0aC5wb3coMiwgcGFyc2VJbnQocGFyc2VkWzJdKSk7XG4gICAgICAgIGNvbnN0IGRpZ2VzdCA9IGF3YWl0IHRoaXMuaGFzaChBcndlYXZlVXRpbHMuc3RyaW5nVG9CdWZmZXIoc2lsb05hbWUpLCBoYXNoSXRlcmF0aW9ucyk7XG4gICAgICAgIGNvbnN0IGFjY2Vzc0tleSA9IEFyd2VhdmVVdGlscy5idWZmZXJUb2I2NChkaWdlc3Quc2xpY2UoMCwgMTUpKTtcbiAgICAgICAgY29uc3QgZW5jcnlwdGlvbmtleSA9IGF3YWl0IHRoaXMuaGFzaChkaWdlc3Quc2xpY2UoMTYsIDMxKSwgMSk7XG4gICAgICAgIHJldHVybiBuZXcgU2lsb1Jlc291cmNlKHNpbG9VUkksIGFjY2Vzc0tleSwgZW5jcnlwdGlvbmtleSk7XG4gICAgfVxuICAgIGFzeW5jIGhhc2goaW5wdXQsIGl0ZXJhdGlvbnMpIHtcbiAgICAgICAgbGV0IGRpZ2VzdCA9IGF3YWl0IHRoaXMuY3J5cHRvLmhhc2goaW5wdXQpO1xuICAgICAgICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgaXRlcmF0aW9ucyAtIDE7IGNvdW50KyspIHtcbiAgICAgICAgICAgIGRpZ2VzdCA9IGF3YWl0IHRoaXMuY3J5cHRvLmhhc2goZGlnZXN0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlnZXN0O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNpbG87XG5jbGFzcyBTaWxvUmVzb3VyY2Uge1xuICAgIHVyaTtcbiAgICBhY2Nlc3NLZXk7XG4gICAgZW5jcnlwdGlvbktleTtcbiAgICBjb25zdHJ1Y3Rvcih1cmksIGFjY2Vzc0tleSwgZW5jcnlwdGlvbktleSkge1xuICAgICAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICAgICAgdGhpcy5hY2Nlc3NLZXkgPSBhY2Nlc3NLZXk7XG4gICAgICAgIHRoaXMuZW5jcnlwdGlvbktleSA9IGVuY3J5cHRpb25LZXk7XG4gICAgfVxuICAgIGdldFVyaSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXJpO1xuICAgIH1cbiAgICBnZXRBY2Nlc3NLZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc0tleTtcbiAgICB9XG4gICAgZ2V0RW5jcnlwdGlvbktleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jcnlwdGlvbktleTtcbiAgICB9XG59XG5leHBvcnRzLlNpbG9SZXNvdXJjZSA9IFNpbG9SZXNvdXJjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbG8uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/silo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/transactions.js":
/*!***************************************************!*\
  !*** ./node_modules/arweave/node/transactions.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst error_1 = __importDefault(__webpack_require__(/*! ./lib/error */ \"(ssr)/./node_modules/arweave/node/lib/error.js\"));\nconst transaction_1 = __importDefault(__webpack_require__(/*! ./lib/transaction */ \"(ssr)/./node_modules/arweave/node/lib/transaction.js\"));\nconst ArweaveUtils = __importStar(__webpack_require__(/*! ./lib/utils */ \"(ssr)/./node_modules/arweave/node/lib/utils.js\"));\nconst transaction_uploader_1 = __webpack_require__(/*! ./lib/transaction-uploader */ \"(ssr)/./node_modules/arweave/node/lib/transaction-uploader.js\");\n__webpack_require__(/*! arconnect */ \"(ssr)/./node_modules/arconnect/index.es.js\");\nclass Transactions {\n    api;\n    crypto;\n    chunks;\n    constructor(api, crypto, chunks) {\n        this.api = api;\n        this.crypto = crypto;\n        this.chunks = chunks;\n    }\n    async getTransactionAnchor() {\n        const res = await this.api.get(`tx_anchor`);\n        if (!res.data.match(/^[a-z0-9_-]{43,}/i) || !res.ok) {\n            throw new Error(`Could not getTransactionAnchor. Received: ${res.data}. Status: ${res.status}, ${res.statusText}`);\n        }\n        return res.data;\n    }\n    async getPrice(byteSize, targetAddress) {\n        let endpoint = targetAddress\n            ? `price/${byteSize}/${targetAddress}`\n            : `price/${byteSize}`;\n        const res = await this.api.get(endpoint);\n        if (!/^\\d+$/.test(res.data) || !res.ok) {\n            throw new Error(`Could not getPrice. Received: ${res.data}. Status: ${res.status}, ${res.statusText}`);\n        }\n        return res.data;\n    }\n    async get(id) {\n        const response = await this.api.get(`tx/${id}`);\n        if (response.status == 200) {\n            const data_size = parseInt(response.data.data_size);\n            if (response.data.format >= 2 &&\n                data_size > 0 &&\n                data_size <= 1024 * 1024 * 12) {\n                const data = await this.getData(id);\n                return new transaction_1.default({\n                    ...response.data,\n                    data,\n                });\n            }\n            return new transaction_1.default({\n                ...response.data,\n                format: response.data.format || 1,\n            });\n        }\n        if (response.status == 404) {\n            throw new error_1.default(\"TX_NOT_FOUND\" /* ArweaveErrorType.TX_NOT_FOUND */);\n        }\n        if (response.status == 410) {\n            throw new error_1.default(\"TX_FAILED\" /* ArweaveErrorType.TX_FAILED */);\n        }\n        throw new error_1.default(\"TX_INVALID\" /* ArweaveErrorType.TX_INVALID */);\n    }\n    fromRaw(attributes) {\n        return new transaction_1.default(attributes);\n    }\n    /** @deprecated use GQL https://gql-guide.arweave.net */\n    async search(tagName, tagValue) {\n        return this.api\n            .post(`arql`, {\n            op: \"equals\",\n            expr1: tagName,\n            expr2: tagValue,\n        })\n            .then((response) => {\n            if (!response.data) {\n                return [];\n            }\n            return response.data;\n        });\n    }\n    getStatus(id) {\n        return this.api.get(`tx/${id}/status`).then((response) => {\n            if (response.status == 200) {\n                return {\n                    status: 200,\n                    confirmed: response.data,\n                };\n            }\n            return {\n                status: response.status,\n                confirmed: null,\n            };\n        });\n    }\n    async getData(id, options) {\n        let data = undefined;\n        try {\n            data = await this.chunks.downloadChunkedData(id);\n        }\n        catch (error) {\n            console.error(`Error while trying to download chunked data for ${id}`);\n            console.error(error);\n        }\n        if (!data) {\n            console.warn(`Falling back to gateway cache for ${id}`);\n            try {\n                const { data: resData, ok, status, statusText, } = await this.api.get(`/${id}`, { responseType: \"arraybuffer\" });\n                if (!ok) {\n                    throw new Error(`Bad http status code`, {\n                        cause: { status, statusText },\n                    });\n                }\n                data = resData;\n            }\n            catch (error) {\n                console.error(`Error while trying to download contiguous data from gateway cache for ${id}`);\n                console.error(error);\n            }\n        }\n        if (!data) {\n            throw new Error(`${id} data was not found!`);\n        }\n        if (options && options.decode && !options.string) {\n            return data;\n        }\n        if (options && options.decode && options.string) {\n            return ArweaveUtils.bufferToString(data);\n        }\n        // Since decode wasn't requested, caller expects b64url encoded data.\n        return ArweaveUtils.bufferTob64Url(data);\n    }\n    async sign(transaction, jwk, //\"use_wallet\" for backwards compatibility only\n    options) {\n        /** Non-exhaustive (only checks key names), but previously no jwk checking was done */\n        const isJwk = (obj) => {\n            let valid = true;\n            [\"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\"].map((key) => !(key in obj) && (valid = false));\n            return valid;\n        };\n        const validJwk = typeof jwk === \"object\" && isJwk(jwk);\n        const externalWallet = typeof arweaveWallet === \"object\";\n        if (!validJwk && !externalWallet) {\n            throw new Error(`No valid JWK or external wallet found to sign transaction.`);\n        }\n        else if (validJwk) {\n            transaction.setOwner(jwk.n);\n            let dataToSign = await transaction.getSignatureData();\n            let rawSignature = await this.crypto.sign(jwk, dataToSign, options);\n            let id = await this.crypto.hash(rawSignature);\n            transaction.setSignature({\n                id: ArweaveUtils.bufferTob64Url(id),\n                owner: jwk.n,\n                signature: ArweaveUtils.bufferTob64Url(rawSignature),\n            });\n        }\n        else if (externalWallet) {\n            try {\n                const existingPermissions = await arweaveWallet.getPermissions();\n                if (!existingPermissions.includes(\"SIGN_TRANSACTION\"))\n                    await arweaveWallet.connect([\"SIGN_TRANSACTION\"]);\n            }\n            catch {\n                // Permission is already granted\n            }\n            const signedTransaction = await arweaveWallet.sign(transaction, options);\n            transaction.setSignature({\n                id: signedTransaction.id,\n                owner: signedTransaction.owner,\n                reward: signedTransaction.reward,\n                tags: signedTransaction.tags,\n                signature: signedTransaction.signature,\n            });\n        }\n        else {\n            //can't get here, but for sanity we'll throw an error.\n            throw new Error(`An error occurred while signing. Check wallet is valid`);\n        }\n    }\n    async verify(transaction) {\n        const signaturePayload = await transaction.getSignatureData();\n        /**\n         * The transaction ID should be a SHA-256 hash of the raw signature bytes, so this needs\n         * to be recalculated from the signature and checked against the transaction ID.\n         */\n        const rawSignature = transaction.get(\"signature\", {\n            decode: true,\n            string: false,\n        });\n        const expectedId = ArweaveUtils.bufferTob64Url(await this.crypto.hash(rawSignature));\n        if (transaction.id !== expectedId) {\n            throw new Error(`Invalid transaction signature or ID! The transaction ID doesn't match the expected SHA-256 hash of the signature.`);\n        }\n        /**\n         * Now verify the signature is valid and signed by the owner wallet (owner field = originating wallet public key).\n         */\n        return this.crypto.verify(transaction.owner, signaturePayload, rawSignature);\n    }\n    async post(transaction) {\n        if (typeof transaction === \"string\") {\n            transaction = new transaction_1.default(JSON.parse(transaction));\n        }\n        else if (typeof transaction.readInt32BE === \"function\") {\n            transaction = new transaction_1.default(JSON.parse(transaction.toString()));\n        }\n        else if (typeof transaction === \"object\" &&\n            !(transaction instanceof transaction_1.default)) {\n            transaction = new transaction_1.default(transaction);\n        }\n        if (!(transaction instanceof transaction_1.default)) {\n            throw new Error(`Must be Transaction object`);\n        }\n        if (!transaction.chunks) {\n            await transaction.prepareChunks(transaction.data);\n        }\n        const uploader = await this.getUploader(transaction, transaction.data);\n        // Emulate existing error & return value behavior.\n        try {\n            while (!uploader.isComplete) {\n                await uploader.uploadChunk();\n            }\n        }\n        catch (e) {\n            if (uploader.lastResponseStatus > 0) {\n                return {\n                    status: uploader.lastResponseStatus,\n                    statusText: uploader.lastResponseError,\n                    data: {\n                        error: uploader.lastResponseError,\n                    },\n                };\n            }\n            throw e;\n        }\n        return {\n            status: 200,\n            statusText: \"OK\",\n            data: {},\n        };\n    }\n    /**\n     * Gets an uploader than can be used to upload a transaction chunk by chunk, giving progress\n     * and the ability to resume.\n     *\n     * Usage example:\n     *\n     * ```\n     * const uploader = arweave.transactions.getUploader(transaction);\n     * while (!uploader.isComplete) {\n     *   await uploader.uploadChunk();\n     *   console.log(`${uploader.pctComplete}%`);\n     * }\n     * ```\n     *\n     * @param upload a Transaction object, a previously save progress object, or a transaction id.\n     * @param data the data of the transaction. Required when resuming an upload.\n     */\n    async getUploader(upload, data) {\n        let uploader;\n        if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n        }\n        if (upload instanceof transaction_1.default) {\n            if (!data) {\n                data = upload.data;\n            }\n            if (!(data instanceof Uint8Array)) {\n                throw new Error(\"Data format is invalid\");\n            }\n            if (!upload.chunks) {\n                await upload.prepareChunks(data);\n            }\n            uploader = new transaction_uploader_1.TransactionUploader(this.api, upload);\n            if (!uploader.data || uploader.data.length === 0) {\n                uploader.data = data;\n            }\n        }\n        else {\n            if (typeof upload === \"string\") {\n                upload = await transaction_uploader_1.TransactionUploader.fromTransactionId(this.api, upload);\n            }\n            if (!data || !(data instanceof Uint8Array)) {\n                throw new Error(`Must provide data when resuming upload`);\n            }\n            // upload should be a serialized upload.\n            uploader = await transaction_uploader_1.TransactionUploader.fromSerialized(this.api, upload, data);\n        }\n        return uploader;\n    }\n    /**\n     * Async generator version of uploader\n     *\n     * Usage example:\n     *\n     * ```\n     * for await (const uploader of arweave.transactions.upload(tx)) {\n     *  console.log(`${uploader.pctComplete}%`);\n     * }\n     * ```\n     *\n     * @param upload a Transaction object, a previously save uploader, or a transaction id.\n     * @param data the data of the transaction. Required when resuming an upload.\n     */\n    async *upload(upload, data) {\n        const uploader = await this.getUploader(upload, data);\n        while (!uploader.isComplete) {\n            await uploader.uploadChunk();\n            yield uploader;\n        }\n        return uploader;\n    }\n}\nexports[\"default\"] = Transactions;\n//# sourceMappingURL=transactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/transactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/arweave/node/wallets.js":
/*!**********************************************!*\
  !*** ./node_modules/arweave/node/wallets.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst ArweaveUtils = __importStar(__webpack_require__(/*! ./lib/utils */ \"(ssr)/./node_modules/arweave/node/lib/utils.js\"));\n__webpack_require__(/*! arconnect */ \"(ssr)/./node_modules/arconnect/index.es.js\");\nclass Wallets {\n    api;\n    crypto;\n    constructor(api, crypto) {\n        this.api = api;\n        this.crypto = crypto;\n    }\n    /**\n     * Get the wallet balance for the given address.\n     *\n     * @param {string} address - The arweave address to get the balance for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a winston string balance.\n     */\n    getBalance(address) {\n        return this.api.get(`wallet/${address}/balance`).then((response) => {\n            return response.data;\n        });\n    }\n    /**\n     * Get the last transaction ID for the given wallet address.\n     *\n     * @param {string} address - The arweave address to get the transaction for.\n     *\n     * @returns {Promise<string>} - Promise which resolves with a transaction ID.\n     */\n    getLastTransactionID(address) {\n        return this.api.get(`wallet/${address}/last_tx`).then((response) => {\n            return response.data;\n        });\n    }\n    generate() {\n        return this.crypto.generateJWK();\n    }\n    async jwkToAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            return this.getAddress();\n        }\n        else {\n            return this.getAddress(jwk);\n        }\n    }\n    async getAddress(jwk) {\n        if (!jwk || jwk === \"use_wallet\") {\n            try {\n                // @ts-ignore\n                await arweaveWallet.connect([\"ACCESS_ADDRESS\"]);\n            }\n            catch {\n                // Permission is already granted\n            }\n            // @ts-ignore\n            return arweaveWallet.getActiveAddress();\n        }\n        else {\n            return this.ownerToAddress(jwk.n);\n        }\n    }\n    async ownerToAddress(owner) {\n        return ArweaveUtils.bufferTob64Url(await this.crypto.hash(ArweaveUtils.b64UrlToBuffer(owner)));\n    }\n}\nexports[\"default\"] = Wallets;\n//# sourceMappingURL=wallets.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXJ3ZWF2ZS9ub2RlL3dhbGxldHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQyxtQkFBTyxDQUFDLG1FQUFhO0FBQ3ZELG1CQUFPLENBQUMsNkRBQVc7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBLHNDQUFzQyxRQUFRO0FBQzlDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvd2FsaS9Eb3dubG9hZHMvcm91bGV0dGUgL25vZGVfbW9kdWxlcy9hcndlYXZlL25vZGUvd2FsbGV0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgQXJ3ZWF2ZVV0aWxzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2xpYi91dGlsc1wiKSk7XG5yZXF1aXJlKFwiYXJjb25uZWN0XCIpO1xuY2xhc3MgV2FsbGV0cyB7XG4gICAgYXBpO1xuICAgIGNyeXB0bztcbiAgICBjb25zdHJ1Y3RvcihhcGksIGNyeXB0bykge1xuICAgICAgICB0aGlzLmFwaSA9IGFwaTtcbiAgICAgICAgdGhpcy5jcnlwdG8gPSBjcnlwdG87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgd2FsbGV0IGJhbGFuY2UgZm9yIHRoZSBnaXZlbiBhZGRyZXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFkZHJlc3MgLSBUaGUgYXJ3ZWF2ZSBhZGRyZXNzIHRvIGdldCB0aGUgYmFsYW5jZSBmb3IuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSAtIFByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgd2l0aCBhIHdpbnN0b24gc3RyaW5nIGJhbGFuY2UuXG4gICAgICovXG4gICAgZ2V0QmFsYW5jZShhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwaS5nZXQoYHdhbGxldC8ke2FkZHJlc3N9L2JhbGFuY2VgKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxhc3QgdHJhbnNhY3Rpb24gSUQgZm9yIHRoZSBnaXZlbiB3YWxsZXQgYWRkcmVzcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZGRyZXNzIC0gVGhlIGFyd2VhdmUgYWRkcmVzcyB0byBnZXQgdGhlIHRyYW5zYWN0aW9uIGZvci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IC0gUHJvbWlzZSB3aGljaCByZXNvbHZlcyB3aXRoIGEgdHJhbnNhY3Rpb24gSUQuXG4gICAgICovXG4gICAgZ2V0TGFzdFRyYW5zYWN0aW9uSUQoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gdGhpcy5hcGkuZ2V0KGB3YWxsZXQvJHthZGRyZXNzfS9sYXN0X3R4YCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2VuZXJhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyeXB0by5nZW5lcmF0ZUpXSygpO1xuICAgIH1cbiAgICBhc3luYyBqd2tUb0FkZHJlc3MoandrKSB7XG4gICAgICAgIGlmICghandrIHx8IGp3ayA9PT0gXCJ1c2Vfd2FsbGV0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEFkZHJlc3MoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEFkZHJlc3MoandrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXRBZGRyZXNzKGp3aykge1xuICAgICAgICBpZiAoIWp3ayB8fCBqd2sgPT09IFwidXNlX3dhbGxldFwiKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICBhd2FpdCBhcndlYXZlV2FsbGV0LmNvbm5lY3QoW1wiQUNDRVNTX0FERFJFU1NcIl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8vIFBlcm1pc3Npb24gaXMgYWxyZWFkeSBncmFudGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICByZXR1cm4gYXJ3ZWF2ZVdhbGxldC5nZXRBY3RpdmVBZGRyZXNzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vd25lclRvQWRkcmVzcyhqd2subik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb3duZXJUb0FkZHJlc3Mob3duZXIpIHtcbiAgICAgICAgcmV0dXJuIEFyd2VhdmVVdGlscy5idWZmZXJUb2I2NFVybChhd2FpdCB0aGlzLmNyeXB0by5oYXNoKEFyd2VhdmVVdGlscy5iNjRVcmxUb0J1ZmZlcihvd25lcikpKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBXYWxsZXRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2FsbGV0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/arweave/node/wallets.js\n");

/***/ })

};
;